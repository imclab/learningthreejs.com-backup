<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Learning Three.js</title>
  <link href="http://learningthreejs.com/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2012-05-02T15:40:01+02:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name>Jerome Etienne</name>
    
  </author>

  
  <entry>
    <title>Augmented Reality 3D Pong</title>
    <link href="http://learningthreejs.com/blog/2012/05/02/augmented-reality-3d-pong/"/>
    <updated>2012-05-02T13:38:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/02/augmented-reality-3d-pong</id>
    <content type="html">&lt;p&gt;This post presents a livecoding screencast of &lt;strong&gt;Augmented Reality 3D Pong&lt;/strong&gt;.
This is an experiment to use &lt;a href=&quot;https://github.com/jeromeetienne/augmentedgesture.js&quot;&gt;augmented gestures&lt;/a&gt;
as a way to interact with game. So i picked a game classic &lt;a href=&quot;http://en.wikipedia.org/wiki/Pong&quot;&gt;&quot;pong&quot;&lt;/a&gt;.
We gonna learn how to code a pong in augmented reality with webgl. The result code
is only 100lines!! nice for augmented reality + webgl + a game :)&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/ZTwhHwAHc3c&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;p&gt;But First... What is &lt;em&gt;augmented gestures&lt;/em&gt; ?
I made &lt;a href=&quot;https://github.com/jeromeetienne/augmentedgesture.js&quot;&gt;augmentedgesture.js&lt;/a&gt;.
This is a library which use &lt;a href=&quot;http://dev.w3.org/2011/webrtc/editor/getusermedia.html&quot;&gt;getUserMedia&lt;/a&gt;
and &lt;a href=&quot;http://www.webrtc.org/&quot;&gt;WebRTC&lt;/a&gt; to grab the webcam.
It analizes the image with &lt;a href=&quot;https://github.com/jeromeetienne/imageprocessing.js&quot;&gt;imageprocessing.js&lt;/a&gt;
and extract the location of flashy balls.
I presented it first at &lt;a href=&quot;http://www.web-5.org/&quot;&gt;Web-5 conference&lt;/a&gt; with me punching
Doom characters in augmented reality :)
&lt;a href=&quot;http://www.youtube.com/watch?v=hUYM93xaIgg&quot;&gt;'Doom: a new workout for geek?'&lt;/a&gt; on youtube
is preview of it. For the webgl, we obviously gonna use
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
and
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/&quot;&gt;tQuery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Controllers for the &lt;a href=&quot;http://en.wikipedia.org/wiki/Wii_Remote&quot;&gt;Wii&lt;/a&gt;
or
&lt;a href=&quot;http://us.playstation.com/ps3/playstation-move/&quot;&gt;PS3&lt;/a&gt; did good as game controllers.
&lt;a href=&quot;http://en.wikipedia.org/wiki/Kinect&quot;&gt;kinect&lt;/a&gt;
is super cool obviously.
They all requires to buy specific hardware tho... So the money is &lt;em&gt;a barrier&lt;/em&gt;.
Some even require specific installation on your computer, with code to compile.
This is &lt;em&gt;another barrier&lt;/em&gt;.
&lt;img class='left ' src='http://learningthreejs.com/data/2012-05-02-augmented-reality-3d-pong/images/Household-Latex-Gloves-HY-H001-1-small.jpg' width='' height='' alt='' title=''&gt;
&lt;img class='right ' src='http://learningthreejs.com/data/2012-05-02-augmented-reality-3d-pong/images/postit-small.jpg' width='' height='' alt='' title=''&gt;
With augmented gestures, you dont need specific devices. I like to use objects
which are cheap and readily available in our everyday life.
Thus people got easily access to the content, in a pure web vibe.
I use children toys that i paid 3euro per ball.
Another possibility is to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Post-it_note&quot;&gt;post it&lt;/a&gt;.
They work well thanks to their flashy colors as you can see
in &lt;a href=&quot;http://www.youtube.com/watch?v=k8R1y0oqiic&quot;&gt;this video&lt;/a&gt;.
They are available in most offices.
Another is to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Rubber_glove&quot;&gt;dish gloves&lt;/a&gt;. They are
readily available and cheap.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jeromeetienne.github.com/augmentedgesture.js/examples/augmentedpong/&quot;&gt;Try it&lt;/a&gt;!
This &lt;a href=&quot;http://www.youtube.com/watch?v=iunNd5lmAVE&quot;&gt;screencast&lt;/a&gt;
is a presentation on how to code
&lt;a href=&quot;http://jeromeetienne.github.com/augmentedgesture.js/examples/augmentedpong/&quot;&gt;augmented reality pong 3D&lt;/a&gt;.
The code is on &lt;a href=&quot;https://github.com/jeromeetienne/augmentedgesture.js/tree/master/examples/augmentedpong&quot;&gt;github&lt;/a&gt;
under &lt;a href=&quot;https://github.com/jeromeetienne/augmentedgesture.js/blob/master/MIT-LICENSE.txt&quot;&gt;MIT license&lt;/a&gt;.
The slides of the presentation are
&lt;a href=&quot;http://jeromeetienne.github.com/augmentedgesture.js/examples/augmentedpong/slides&quot;&gt;here&lt;/a&gt;.
Im not sure about the format of this video... the mix live coding + slides + screencast is usual.
Anyway publishing it in &quot;publish early, publish often&quot; mood :)&lt;/p&gt;

&lt;p&gt;Enjoy&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/iunNd5lmAVE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;!-- more --&gt;

</content>
  </entry>
  
  <entry>
    <title>Video Conference on Top of WebGL</title>
    <link href="http://learningthreejs.com/blog/2012/04/12/video-conference-on-top-of-webgl/"/>
    <updated>2012-04-12T13:20:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/04/12/video-conference-on-top-of-webgl</id>
    <content type="html">&lt;p&gt;This post presents
&lt;a href=&quot;http://webglmeeting.appspot.com&quot;&gt;WebGL Meeting&lt;/a&gt;,
a very simple WebGL application to do webrtc call.
It is a follow up of &lt;a href=&quot;http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/&quot;&gt;&quot;Fun with live video on webgl&quot;&lt;/a&gt;.
It was presenting how to use the WebCam using
&lt;a href=&quot;http://dev.w3.org/2011/webrtc/editor/getusermedia.html&quot;&gt;WebRTC getUserMedia()&lt;/a&gt;.
This one goes one step further and make an actual
&lt;a href=&quot;http://www.webrtc.org/&quot;&gt;WebRTC call&lt;/a&gt;
displayed in a WebGL scene.&lt;/p&gt;

&lt;p&gt;In fact, it has already been done a month ago! As you can see
&lt;a href=&quot;http://www.youtube.com/watch?v=em5RWcstfI0&amp;amp;feature=watch_response&quot;&gt;here&lt;/a&gt;
:)
The video from the first post, &lt;a href=&quot;http://www.youtube.com/watch?v=vnNihxl3taE&quot;&gt;'being on tv, watching tv'&lt;/a&gt; has been answered
by &lt;a href=&quot;https://plus.google.com/109216128632357967445/posts&quot;&gt;Ethan Hugg&lt;/a&gt; from cisco.
My very first video reponse btw! He
&lt;a href=&quot;http://www.youtube.com/watch?v=em5RWcstfI0&amp;amp;feature=watch_response&quot;&gt;shows a SIP video call&lt;/a&gt;
using an version of Chromium hacked by
&lt;a href=&quot;https://plus.google.com/102821430095362232437/posts&quot;&gt;Suhas Nandakumar&lt;/a&gt;.
Definitly cool stuff!
&lt;a href=&quot;http://webglmeeting.appspot.com&quot;&gt;WebGL Meeting&lt;/a&gt; is similar but run on unmodified browsers.
The
&lt;a href=&quot;http://youtu.be/Fjb7xBnxq9k&quot;&gt;screencast&lt;/a&gt;
below is short demo of it.&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/Fjb7xBnxq9k&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;!-- more --&gt;


&lt;h2&gt;WebRTC progress&lt;/h2&gt;

&lt;p&gt;Using a modified browser is cool for make nice demo like
&lt;a href=&quot;https://plus.google.com/109216128632357967445/posts/QkFu7cxmbzi&quot;&gt;this one&lt;/a&gt;.
Nevertheless it reduces how widely the technology can spread.
It is now possible to do it using opensource and mainstream browsers.
This field advances so fast!&lt;/p&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/2012-04-12-video-conference-on-top-of-webgl/twoTVsWithWebGLTeam-small.jpg' width='320' height='240' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mozillamediagoddess.org/&quot;&gt;Mozilla team&lt;/a&gt; is
&lt;a href=&quot;http://hacks.mozilla.org/2012/04/webrtc-efforts-underway-at-mozilla/&quot;&gt;working hard&lt;/a&gt;
to make it happen as soon as possible.
It is even available on mobile with
&lt;a href=&quot;http://weblog.bocoup.com/javascript-webrtc-opera-mobile-12/&quot;&gt;Opera Mobile 12&lt;/a&gt;.
Some &lt;a href=&quot;http://www.youtube.com/watch?v=wpwjtzXgNFQ]&quot;&gt;&quot;protothon&quot;&lt;/a&gt; are happening about it.
&lt;a href=&quot;http://www.webrtc.org/&quot;&gt;WebRTC&lt;/a&gt;
is on the edge but it is definitly coming hard.
The picture on the right is Chrome WebRTC team doing thumb up on
&lt;a href=&quot;webglmeeting.appspot.com&quot;&gt;WebGLMeeting&lt;/a&gt;
at an WebRTC event for
&lt;a href=&quot;http://www.ietf.org/meeting/83/index.html&quot;&gt;IETF 83&lt;/a&gt;
:)&lt;/p&gt;

&lt;h2&gt;What about the code ?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jeromeetienne/webglmeeting&quot;&gt;WebGLMeeting source&lt;/a&gt;
is available on Github under MIT license.
It uses three.js to handle the WebGL.
It is the &lt;a href=&quot;http://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/&quot;&gt;AppRTC app&lt;/a&gt;
mostly unmodified, with a simple WebGL skin on top.&lt;/p&gt;

&lt;p&gt;A post from Chrome WebRTC team recently announced
&lt;a href=&quot;http://www.webrtc.org/blog/sourcecodetoapprtcappspotcomexampleappavailable&quot;&gt;&quot;Source code to apprtc.appspot.com example app available&quot;&lt;/a&gt;.
The post releases the
&lt;a href=&quot;http://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/&quot;&gt;source&lt;/a&gt;
on google code.
The &lt;a href=&quot;https://apprtc.appspot.com&quot;&gt;apprtc demo&lt;/a&gt;
is a very simple, one-to-one, webrtc call.
Go look at the &lt;a href=&quot;http://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/&quot;&gt;source&lt;/a&gt;, dont be shy :)
It is very small, the whole code client+server, is less than 15kbyte.
It is easy to understand and deploy thanks too google App Engine.&lt;/p&gt;

&lt;h2&gt;Face tracker seeking love ?&lt;/h2&gt;

&lt;p&gt;Surprising hey ? Well the source contains a face tracker,
&lt;a href=&quot;http://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/html/face.html&quot;&gt;face.html&lt;/a&gt;.
It works rather well but it is slow. If somebody could give it more love...
It is a rather naive implementation which works well but got many rooms for speed improvement.
It could make face tracking, less clumsy than wearing augmented reality marker on top
of your head like
&lt;a href=&quot;http://learningthreejs.com/blog/2012/03/12/augmented-reality-in-the-browser/&quot;&gt;i did a while back&lt;/a&gt;
:)&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I got the feeling WebRTC gonna change a lot of things soon. The peer-to-peer aspect makes it super
cheap to integrate live video conferences to your own sites.&lt;/p&gt;

&lt;p&gt;That's all folks, have fun!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>tQuery WebAudio for More Realistic 3D</title>
    <link href="http://learningthreejs.com/blog/2012/03/20/sounds-for-more-realistic-3d/"/>
    <updated>2012-03-20T01:08:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/03/20/sounds-for-more-realistic-3d</id>
    <content type="html">&lt;p&gt;This post is about
&lt;a href=&quot;https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html&quot;&gt;Web Audio API&lt;/a&gt;.
It is a new HTML5 api which provide great controls on the audio layer.
It is much better than the
&lt;a href=&quot;http://www.w3.org/TR/html5/the-iframe-element.html#the-audio-element&quot;&gt;audio tag&lt;/a&gt;.
It is more suitable for games or music software.
As 3D lovers, the one feature that we care about is
&lt;a href=&quot;http://en.wikipedia.org/wiki/3D_audio_effect&quot;&gt;audio spacialization&lt;/a&gt;.
This makes Web Audio a complement to webgl.
It implements positional sounds, so you
get
&lt;a href=&quot;http://en.wikipedia.org/wiki/Panning_(audio)&quot;&gt;panning&lt;/a&gt;,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Doppler_effect&quot;&gt;dopler&lt;/a&gt;
and all.
It makes the scene so much more realistic.&lt;/p&gt;

&lt;p&gt;The user tends to associate 3D to reality, so efficient 3D is a lot about realism.
The brain identifies 2D as artificial while 3D seems immediatly more natural.
Anything which appears close to reality increase this effect.
Feeding this illusion creates a more immersive experience to the user.
Realistic physics is one (stay tuned :).
Web Audio audio spacialization is another.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;http://youtu.be/QjRF0_KENQ8&quot;&gt;screencast&lt;/a&gt;
below is a live coding session using &lt;code&gt;tQuery.WebAudio&lt;/code&gt;.
If you want, you can experiment with this code in our playground. Just click
&lt;a href=&quot;http://bit.ly/GApgWg&quot;&gt;here&lt;/a&gt;
and start coding :)&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/QjRF0_KENQ8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;!-- more --&gt;


&lt;h2&gt;Background on WebAudio API&lt;/h2&gt;

&lt;p&gt;To learn about WebAudio API is a large subject.
It is out of the scope of this introduction.
You can refere to many dedicated tutorials tho.
The &lt;a href=&quot;https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html&quot;&gt;specification&lt;/a&gt;
itself is clear and very readable.&lt;/p&gt;

&lt;p&gt;You can find more comprehensive documentation at &lt;a href=&quot;html://html5rocks.com&quot;&gt;html5rocks&lt;/a&gt;.
It contains several very usefull tutorials to learn Web Audio API.
They go from
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webaudio/intro/&quot;&gt;&quot;Getting started with the web audio API&quot;&lt;/a&gt;
to
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webaudio/positional_audio/&quot;&gt;&quot;mixing positional audio and webgl&quot;&lt;/a&gt;
or
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webaudio/games/&quot;&gt;&quot;developing game audio&quot;&lt;/a&gt;.
If you want, you can find demos in
&lt;a href=&quot;http://chromium.googlecode.com/svn/trunk/samples/audio/index.html&quot;&gt;chromium samples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let's start coding :)&lt;/p&gt;

&lt;h2&gt;Let's get Started&lt;/h2&gt;

&lt;p&gt;First you need to enable WebAudio into your world.
Thus you will be able to play sound in it.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;world.enableWebAudio();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now that the world is able to do sound, let's create one&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sound = tQuery.createSound();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now we need to load a sound file and to start playing it. The callback
is notified when the file is downloaded. At this point, the sound
it ready to play.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sound.load('techno.mp3', function(sound){
    sound.play();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;If you want to know more, the full API is documented
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.Sound.html&quot;&gt;here&lt;/a&gt;
and
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.html&quot;&gt;here&lt;/a&gt;
thanks to jsdoc.&lt;/p&gt;

&lt;h2&gt;Spacialization and Animation&lt;/h2&gt;

&lt;p&gt;Now that we can play a sound, what else can we do ? One definitively interesting part for
&lt;a href=&quot;https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html&quot;&gt;webaudio API&lt;/a&gt;
is the ability to spacialize the sound.
The easiest way to do that is to use &lt;code&gt;.follow()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sound.follow(object3d);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;If you want more controls, you can check
&lt;code&gt;.updateWithObject3d()&lt;/code&gt; or &lt;code&gt;.updateWithMatrix4()&lt;/code&gt;.
You may want to animate your 3D object based on the sound you hear.
For that, a simple function &lt;code&gt;.amplitude()&lt;/code&gt; has been written.
It is likely a naive implementation but it does the trick, i think.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var amplitude = sound.amplitude();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;It returns an average of low frequencies of the sound.
Note that i dunno if it is the proper term in audio world.
Most likely not :) If you know the proper term, please leave a comment.&lt;/p&gt;

&lt;h2&gt;Want more info ?&lt;/h2&gt;

&lt;p&gt;You get two examples in
&lt;a href=&quot;https://github.com/jeromeetienne/tquery/tree/master/plugins/webaudio/examples&quot;&gt;the source&lt;/a&gt;.
The
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/plugins/webaudio/examples/&quot;&gt;minimal one&lt;/a&gt;
simply play a sound.
The other is more interactive. It is the
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/plugins/webaudio/examples/playground&quot;&gt;playground&lt;/a&gt;.
It allows to play with various parameters.
tQuery API documentation is provided via
&lt;a href=&quot;http://code.google.com/p/jsdoc-toolkit/&quot;&gt;jsdoc&lt;/a&gt;.
You can find the whole API
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/&quot;&gt;here&lt;/a&gt;.
The plan is to do the same for the plugins.&lt;/p&gt;

&lt;p&gt;So for tQuery WebAudio plugin, you get API documentation of each class: the main class
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.html&quot;&gt;tQuery.WebAudio&lt;/a&gt;
and the
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.Sound.html&quot;&gt;Sound class&lt;/a&gt;.
You can even check the
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.NodeChainBuilder.html&quot;&gt;Node chain builder&lt;/a&gt;
doc if you want to go deep and configure your own audio nodes chain :)&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ok so now you can play sounds in your 3D scene. You can make the sound follows a given
object3d with realistic sound spatialization. All that in just a few lines. Rather cool
if you ask me :)
&lt;a href=&quot;http://en.wikipedia.org/wiki/Winamp&quot;&gt;Winamp&lt;/a&gt; effects are back !!
Later i will likely implement
click detection as seen
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webaudio/games/#toc-clip-detect&quot;&gt;here&lt;/a&gt;
and environmental effect like 'cathedral', 'telephone' etc...
as seen
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webaudio/positional_audio/#toc-enveffects&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I love how sound make our 3D scene more realistic. That's all for today, have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Augmented Reality in the Browser</title>
    <link href="http://learningthreejs.com/blog/2012/03/12/augmented-reality-in-the-browser/"/>
    <updated>2012-03-12T11:36:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/03/12/augmented-reality-in-the-browser</id>
    <content type="html">&lt;p&gt;This post is about augmented reality in the browser.
In a recent post, we saw that it is now possible to
&lt;a href=&quot;http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/&quot;&gt;have live video in webgl&lt;/a&gt;
with
&lt;a href=&quot;http://www.webrtc.org/&quot;&gt;WebRTC&lt;/a&gt;.
Due to this,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Augmented_reality&quot;&gt;augmented reality&lt;/a&gt;
is under the spotlight. Recently
&lt;a href=&quot;http://www.html5rocks.com/&quot;&gt;html5rock&lt;/a&gt; published a
tutorial
by
&lt;a href=&quot;http://www.html5rocks.com/en/profiles/#ilmari&quot;&gt;ilmari heikkinen&lt;/a&gt;
about
&quot;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webgl/jsartoolkit_webrtc/&quot;&gt;writting augmented reality application using jsartoolkit&lt;/a&gt;&quot;.
Ilmari is
&lt;a href=&quot;https://plus.google.com/115293744081058969329/about&quot;&gt;google devrel for webgl&lt;/a&gt;
and the author of
&lt;a href=&quot;http://github.com/kig/JSARToolKit&quot;&gt;JSARToolKit&lt;/a&gt;
too. So we are in good hands :)
The tutorial even include a part about binding it with
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;.
I took this nice tutorial and packaged the code even easier to reuse.&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/rzLuJxTraos&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;!-- more --&gt;


&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/2012-03-12-augmented-reality-in-the-browser/images/marker-small.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jeromeetienne.github.com/tquery.jsartoolkit/&quot;&gt;Try this demo&lt;/a&gt;.
If you got &lt;a href=&quot;http://www.webrtc.org/running-the-demos&quot;&gt;WebRTC is available&lt;/a&gt; in your browser, take
&lt;a href=&quot;http://jeromeetienne.github.com/tquery.jsartoolkit/marker/marker.png&quot;&gt;this marker&lt;/a&gt;,
and put it in front on your webcam.
It is the same you see on the right.
It is best to print it on paper.
If you can't, point your phone to
&lt;a href=&quot;http://jeromeetienne.github.com/tquery.jsartoolkit/marker&quot;&gt;this page&lt;/a&gt; instead.
Phone screens tend to reflect lights from your environment tho. They may
reduce the accuracy of the marker detection.&lt;/p&gt;

&lt;p&gt;Now let's see how you can to use all this to build your own demos :)&lt;/p&gt;

&lt;h2&gt;You Include it&lt;/h2&gt;

&lt;p&gt;First you include it as usual in your page. The code is available
&lt;a href=&quot;https://github.com/jeromeetienne/tquery.jsartoolkit&quot;&gt;here&lt;/a&gt;.
Note that
&lt;a href=&quot;http://github.com/kig/JSARToolKit&quot;&gt;JSARToolKit&lt;/a&gt;
is released under GPL, so some restrictions apply.
The threex is under MIT license as usual.&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;JSARToolKit.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;threex.jsartoolkit.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;You Initialize It&lt;/h2&gt;

&lt;p&gt;Once you get the code, you instanciate the object like this.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var threexAR    = new THREEx.JSARToolKit({
    srcElement  : srcElement,
    threshold   : threshold,
    callback    : function(event){}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;srcElement&lt;/code&gt; may be a
&lt;a href=&quot;http://en.wikipedia.org/wiki/HTML5_video&quot;&gt;video&lt;/a&gt;, an
&lt;a href=&quot;http://www.w3.org/TR/html401/struct/objects.html#h-13.2&quot;&gt;image&lt;/a&gt;
or a
&lt;a href=&quot;http://www.w3.org/TR/html5/the-canvas-element.html&quot;&gt;canvas&lt;/a&gt;.
When the video is shoot in a uncontrolled environement,
the marker detection may be less reliable, due to variations of lighting.
&lt;code&gt;threshold&lt;/code&gt; is a value between 0 and 255 to adapt your detection to those variations.
To detect the augmented reality markers in the &lt;code&gt;srcElement&lt;/code&gt;, just use this line in your
rendering loop.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;threexAR.update();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;No rocket science here.&lt;/p&gt;

&lt;h2&gt;You Use It&lt;/h2&gt;

&lt;p&gt;During &lt;code&gt;.update()&lt;/code&gt;, the callback is notified with events.
They describe the markers present on the srcElement.
Each event got various fields:
A &lt;code&gt;.markerId&lt;/code&gt; which tell you which marker has been recognized.
The
&lt;a href=&quot;http://jeromeetienne.github.com/tquery.jsartoolkit/marker&quot;&gt;one used above&lt;/a&gt;
is the &lt;em&gt;64&lt;/em&gt;. You can find the whole list
&lt;a href=&quot;https://github.com/kig/JSARToolKit/tree/master/demos/markers&quot;&gt;in JSARToolKit repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.type&lt;/code&gt; field describe what is happening to this marker.
It may be &lt;em&gt;create&lt;/em&gt;, &lt;em&gt;update&lt;/em&gt; or &lt;em&gt;delete&lt;/em&gt;.
&lt;em&gt;create&lt;/em&gt; if the marker has just been detected,
&lt;em&gt;update&lt;/em&gt; if the marker was present before.
and &lt;em&gt;delete&lt;/em&gt; if the marker is no more present.
Rather obvious :)
The &lt;code&gt;.matrix&lt;/code&gt; field is a
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/core/Matrix4.js&quot;&gt;THREE.Matrix4&lt;/a&gt;.
It is a transform which matches the position of the marker in space.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So now we can do augmented reality in a browser.
The code of the demo is &lt;a href=&quot;https://github.com/jeromeetienne/tquery.jsartoolkit&quot;&gt;here&lt;/a&gt;.
Up to us to find actual application of this technology.
Currently most browsers with webcam are running on desktop/laptop tho.
As most their webcam is directly attached to screens, It limits the flexibility of
what you could put on front of the camera.
As for mobile, only opera 12 is currently the only mobile browser able
to read the webcam.&lt;/p&gt;

&lt;p&gt;That's all folks. Have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>tQuery v0 - Let's get started</title>
    <link href="http://learningthreejs.com/blog/2012/03/05/tquery-version-0/"/>
    <updated>2012-03-05T10:42:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/03/05/tquery-version-0</id>
    <content type="html">&lt;p&gt;This post is an update on
&lt;a href=&quot;https://github.com/jeromeetienne/tquery&quot;&gt;tquery&lt;/a&gt; progress.
&lt;a href=&quot;http://learningthreejs.com/blog/categories/tquery/&quot;&gt;Our previous posts&lt;/a&gt;
were previews,
for example
&lt;a href=&quot;http://learningthreejs.com/blog/2012/02/15/valentine-card-in-tquery/&quot;&gt;valentine card in tQuery&lt;/a&gt;
or
&lt;a href=&quot;http://learningthreejs.com/blog/2012/02/27/linkify-tquery-extension/&quot;&gt;linkify, a tQuery extension&lt;/a&gt;.
This post is the release of &lt;em&gt;version 0&lt;/em&gt;.
It will walk you thru the website and shows how to run your first tQuery project
with the boilerplate.
You should be able to play with tQuery after that :)&lt;/p&gt;

&lt;p&gt;Ok It is still experimental.
I have been paddling hard to make it usable by other people tho.
The &lt;a href=&quot;http://jeromeetienne.github.com/tquery/www/playground/&quot;&gt;playground&lt;/a&gt;
is the easiest way to start experimenting. It is all online.
no install, no download, simple and understandable.
tQuery code is all on &lt;a href=&quot;https://github.com/jeromeetienne/tquery&quot;&gt;github repository&lt;/a&gt;.
The
&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=iby6kijX5Zw&quot;&gt;screencast&lt;/a&gt;
below will walk you thru the
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/www/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/iby6kijX5Zw&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;!-- more --&gt;


&lt;h2&gt;Solid Ground to Build On&lt;/h2&gt;

&lt;p&gt;I would like tQuery to be a solid ground. Thus people can easily build
their three.js extensions on top of it. So the code is
documented, tested and performance is monitored. Here is some principles that
i consider important for tQuery.
Note that those principles are the theory.
It doesnt imply i implement them well in practice :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code must be tested&lt;/strong&gt;. It helps detect bugs earlier.
Our &lt;a href=&quot;http://jeromeetienne.github.com/tquery/tests/&quot;&gt;tests&lt;/a&gt;
are done with
&lt;a href=&quot;http://visionmedia.github.com/mocha/&quot;&gt;mocha&lt;/a&gt;.
&lt;strong&gt;API must be documented&lt;/strong&gt;. It helps new users to use the library.
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/docs/&quot;&gt;API documentation&lt;/a&gt;
is done with
&lt;a href=&quot;http://code.google.com/p/jsdoc-toolkit/&quot;&gt;jsdoc&lt;/a&gt;.
&lt;strong&gt;Performance must be monitored&lt;/strong&gt;. Thus developpers are immediatly aware of performance
change when the code is modified.
Our
&lt;a href=&quot;http://jeromeetienne.github.com/tquery/bench/&quot;&gt;benchmarks&lt;/a&gt;
are done with
&lt;a href=&quot;http://benchmarkjs.com/&quot;&gt;benchmark.js&lt;/a&gt;
and displayed by
&lt;a href=&quot;https://github.com/jeromeetienne/benchrunner&quot;&gt;benchrunner&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;How to Get Started&lt;/h2&gt;

&lt;p&gt;or how to get the boilerplate :)
tQuery Boilerplate is a template to get you started. You download it and
modify it until it fits your needs. It is a fast way to start a
clean project with tquery.
The running boilerplate looks &lt;a href=&quot;http://jeromeetienne.github.com/tqueryboilerplate/&quot;&gt;like that&lt;/a&gt;.
The
&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=YOsnKMesyRk&quot;&gt;screencast&lt;/a&gt;
below shows how to use it.&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/YOsnKMesyRk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;Running tQuery Boilerplate&lt;/h2&gt;

&lt;p&gt;You can try the boilerplate online with the &lt;a href=&quot;http://jeromeetienne.github.com/tquery/www/playground/&quot;&gt;playground&lt;/a&gt;.
Want to run it on your computer ?
First you get boilerplate's files
&lt;a href=&quot;https://github.com/downloads/jeromeetienne/tquery/tqueryboilerplate.zip&quot;&gt;here&lt;/a&gt;.
Then you launch the http server to serve them. Here is a little shell script which does it all for you.&lt;/p&gt;

&lt;p&gt;```bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -OL https://github.com/downloads/jeromeetienne/tquery/tqueryboilerplate.zip
unzip tqueryboilerplate.zip
cd tqueryboilerplate
make server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Then you open a browser on &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt; to
see it running. Up to you to modify &lt;code&gt;index.html&lt;/code&gt; until it fits your needs. &lt;code&gt;index.html&lt;/code&gt;
looks like the code below... Quite short.&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;&amp;lt;title&amp;gt;Minimal tQuery Page&amp;lt;/title&amp;gt;
&amp;lt;script src=&quot;./tquery-all.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;script&amp;gt;
    var world   = tQuery.createWorld().boilerplate().start();
    var object  = tQuery.createTorus().addTo(world);
&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is the initial release of tQuery.
I like how it looks.
API is documented,
code is tested, and performance measured.
The code produced by the API seems short and quite understandable.
Nice foundations especially for a version 0.&lt;/p&gt;

&lt;p&gt;The next step is about stabilizing tquery.js itself, cleaning it up.
I am currently quite busy doing just that.
So please dont hammer me with feature requests at the moment, i won't have
time to handle them.
Pull requests are welcomed tho.
Things will change when tQuery core become more stable.&lt;/p&gt;

&lt;p&gt;That's all folks, have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Linkify, a tQuery Extension</title>
    <link href="http://learningthreejs.com/blog/2012/02/27/linkify-tquery-extension/"/>
    <updated>2012-02-27T08:55:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/02/27/linkify-tquery-extension</id>
    <content type="html">&lt;p&gt;This post is an update on
&lt;a href=&quot;https://github.com/jeromeetienne/tquery&quot;&gt;tquery&lt;/a&gt; progress.
It is about &lt;code&gt;linkify&lt;/code&gt;, a first experimental extension.
Thanks to it, any 3D object may become a link.
So  3D objects act as a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag, i.e. the object becomes
clickable and clicking on it open a new url.
It is built on top of domEvents.
It is used to incoporate
&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html&quot;&gt;dom kindof events&lt;/a&gt;
in 3D world.
We saw them a few week back in
&lt;a href=&quot;http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space/&quot;&gt;'dom events in 3D space' post&lt;/a&gt;.
Previous posts on tquery may be found &lt;a href=&quot;http://learningthreejs.com/blog/categories/tquery/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/MlW7PeuXGDM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;!-- more --&gt;


&lt;p&gt;Building extensions on top of others is kinda the point of an extension system.
My dream scenario is :
(1) People do plugins for three.js, like they do in jQuery).
(2) They share their work.
(3) They build on top of each other.
(4) Loop to 1.
All in opensource spirit. All good in my book. Ok enougth talk, let's code.&lt;/p&gt;

&lt;h2&gt;Dom Events in 3D Space&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;domEvents&lt;/em&gt; have been ported to tQuery.
It is an important part because jQuery developpers use this a lot, thru
&lt;a href=&quot;http://api.jquery.com/on/&quot;&gt;.on()&lt;/a&gt;/&lt;a href=&quot;http://api.jquery.com/off/&quot;&gt;.off()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery('cube').on('mouseover', function(event){
    console.log(&quot;somebody put the mouse over a cube&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The supported events are click obviously,
&lt;a href=&quot;http://www.quirksmode.org/dom/events/click.html&quot;&gt;dblclick, mouseup, mousedown&lt;/a&gt;
, &lt;a href=&quot;http://www.quirksmode.org/dom/events/mouseover.html&quot;&gt;mouseover and mouseout&lt;/a&gt;.
It has been improved to better match
&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html&quot;&gt;actual dom events&lt;/a&gt;.
The callback now receives a event object. It contains &lt;code&gt;.type&lt;/code&gt; and &lt;code&gt;.target&lt;/code&gt;
as described in &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event&quot;&gt;dom specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery('.myClass').on('click', function(event){
    console.log(&quot;An event of type&quot;, event.type, &quot;has been trigger on &quot;, event.target);
    // If you wish to stop propagation, just do 
    event.stopPropagation();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-bubbling&quot;&gt;Event bubbling&lt;/a&gt;
is now supported. So events are dispatched to the
&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget&quot;&gt;target&lt;/a&gt;
and follow its parent chain upward. It is possible to cancel propagation with an usual
&lt;code&gt;.stopPropagation()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Linkify or How Any 3D Object May Become a Link&lt;/h2&gt;

&lt;p&gt;Linkify is an experimental plugins built on top of &lt;code&gt;tquery.domevent&lt;/code&gt;. It is
shown in the screencast.
It makes any 3D objects object act as a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag, i.e. the object becomes
clickable and clicking on it open a new url. When the mouse is over it, an underline
is added to make it even more webpage like.
Code is rather short.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery('text').linkify('http://example.com')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It has been quite time consuming to set up the basis for the project:
tests, bechmarks, docs, or plugins interdependancy resolution.
For each of those field, i had to review the various alternatives,
pick one and setting it up as properly as possible.&lt;/p&gt;

&lt;p&gt;Here are the current choises, they may change in the future.
&lt;a href=&quot;http://requirejs.org/&quot;&gt;require.js&lt;/a&gt; will be used for the dependancies between plugins.
Tests are done with &lt;a href=&quot;http://visionmedia.github.com/mocha/&quot;&gt;mocha&lt;/a&gt;,
a javascript test framework for javascript which run in node.js and browser.
Later, we may improve that by testing the rendering output using
&lt;a href=&quot;http://www.pixastic.com/&quot;&gt;pixastic&lt;/a&gt; to do
&lt;a href=&quot;http://en.wikipedia.org/wiki/Mean_squared_error&quot;&gt;statistical&lt;/a&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio&quot;&gt;images&lt;/a&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Root_mean_square_deviation&quot;&gt;comparison&lt;/a&gt;.
Benchmarks are done with
&lt;a href=&quot;http://benchmarkjs.com/&quot;&gt;benchmarks.js&lt;/a&gt;, a robust benchmarking library for javascript,
using
&lt;a href=&quot;https://github.com/jeromeetienne/benchrunner&quot;&gt;benchrunner&lt;/a&gt;
as runner.
It is the engine behind the wellknown
&lt;a href=&quot;http://jsperf.com/browse&quot;&gt;jsperf&lt;/a&gt;
site.
Inline documentation is written in &lt;a href=&quot;http://code.google.com/p/jsdoc-toolkit/&quot;&gt;jsdoc&lt;/a&gt;
format using
&lt;a href=&quot;http://www.thebrightlines.com/2010/05/06/new-template-for-jsdoctoolkit-codeview/&quot;&gt;codeview&lt;/a&gt;
template.&lt;/p&gt;

&lt;p&gt;That's all folks. Have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>a Valentine card in tQuery</title>
    <link href="http://learningthreejs.com/blog/2012/02/15/valentine-card-in-tquery/"/>
    <updated>2012-02-15T10:21:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/02/15/valentine-card-in-tquery</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;http://learningthreejs.com/blog/categories/tquery/&quot;&gt;tQuery&lt;/a&gt; experimentation is going on.
It is a lot of fun to code :)
This post is just a short presentation of two plugins currently in incubation:
tquery.text and tquery.shape.
Yesterday was
&lt;a href=&quot;http://en.wikipedia.org/wiki/Valentine's_Day&quot;&gt;valentine day&lt;/a&gt;,
so i thought it would be cool to stay in topic.
The
&lt;a href=&quot;http://www.youtube.com/watch?v=8EHqrAXcKrY&quot;&gt;screencast&lt;/a&gt;
is a live coding of a
&lt;a href=&quot;http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/&quot;&gt;valentine card&lt;/a&gt; in tQuery :)&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/8EHqrAXcKrY&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;!-- more --&gt;


&lt;h2&gt;Let's Write Text in 3D&lt;/h2&gt;

&lt;p&gt;tQuery.text plugin writes text in 3D.
It is based on
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/extras/geometries/TextGeometry.js&quot;&gt;TextGeometry&lt;/a&gt;.
Here is a simple example.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery.createText(&quot;tQuery is Fun!&quot;).addTo(world);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Let's Easily Create Shape&lt;/h2&gt;

&lt;p&gt;&lt;img class='right  ' src='http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/images/shape.triangle-small.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;tQuery shape is made to easily build and
&lt;a href=&quot;http://en.wikipedia.org/wiki/Extrusion&quot;&gt;extrude&lt;/a&gt;
shapes in javascript.
It is based on
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/extras/core/Shape.js&quot;&gt;THREE.Shape&lt;/a&gt;.
tquery.shape is cool because it uses a API very similar to
&lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)&quot;&gt;canvas 2D&lt;/a&gt;
&lt;a href=&quot;https://developer.mozilla.org/en/Canvas_tutorial/Drawing_shapes&quot;&gt;path&lt;/a&gt;.
This line will build a triangle.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery.createShape().moveTo(0,0).lineTo(1,1).lineTo(-1,1).lineTo(0,0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;img class='left  ' src='http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/images/shape.fish-small.png' width='' height='' alt='' title=''&gt;
&lt;img class='right ' src='http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/images/shape.smiley-small.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;Some shapes are already available, like the triangle above, or a fish, smiley
and a heart. Here is a smiley.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var shape = tQuery.createSmileyShape();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;The valentince card&lt;/h2&gt;

&lt;p&gt;Last but not least, the valentine card!
&lt;a href=&quot;http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/&quot;&gt;Try it out&lt;/a&gt;!
It uses the plugins above to build an animated valentine card.
It is done with less than 20lines...
tQuery seems to produce short code.&lt;/p&gt;

&lt;iframe src=&quot;http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/&quot;
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width=&quot;100%&quot; height=&quot;349&quot; frameborder=&quot;0&quot;&gt;
&lt;/iframe&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Today we saw 2 plugins still in progress.
tQuery experiment seems to go well for now.
The code is moving at fast pace.
I am currently experimenting with &lt;a href=&quot;http://requirejs.org/&quot;&gt;require.js&lt;/a&gt;
to automatically resolve dependancies between plugins.
What's next ? likely a series with a step by step on how to build a tunnel game.&lt;/p&gt;

&lt;p&gt;That's all folks! have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An Extension System for three.js</title>
    <link href="http://learningthreejs.com/blog/2012/02/08/extension-system-for-three-js/"/>
    <updated>2012-02-08T15:24:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/02/08/extension-system-for-three-js</id>
    <content type="html">&lt;p&gt;  This post an overview of a work-in-progress.
It is about an extension system on top of three.js which mimics jQuery API.
I came up with the idea while thinking about how to
trim three.js and make it easier to maintain. I have always been impressed
with jQuery plugin ecosystem. It is lively, varied,
and contains impressive specimens. I would love to have such
a rich ecosystem for three.js's plugins.&lt;/p&gt;

&lt;p&gt;  Let's call this experiment &lt;strong&gt;tQuery&lt;/strong&gt; as in &quot;three.js + jQuery&quot;.
It makes it easier to understand if you already known this library.
This is a v0 in the
&lt;a href=&quot;http://catb.org/~esr/writings/homesteading/cathedral-bazaar/ar01s04.html&quot;&gt;&quot;publish early, publish often&quot;&lt;/a&gt;
vibe.
The goal of this little project is to see if we can mix
to mix three.js power with jquery API usability...
How far this concept can fly ? We will see.&lt;/p&gt;

&lt;p&gt;So what do we want ? The code must make &lt;strong&gt;three.js easy to extend&lt;/strong&gt;
and should &lt;strong&gt;mimics jQuery whenever possible&lt;/strong&gt;.
In order to see if the system hold under load, i wrote several extensions already.
It is very early. The architecture of it all is far from stable.
Code is advancing at fast pace tho :)
The screencast below is short live coding session. Just to give an idea of the current
status.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/Aa7sHUE224A&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;DOM&lt;/h2&gt;

&lt;p&gt;With jQuery and the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;DOM&lt;/a&gt;, you
get a tree of
&lt;a href=&quot;https://developer.mozilla.org/en/DOM/element&quot;&gt;elements&lt;/a&gt;
from the page.
In fact, three.js got this tree as well. Surprising hey ?
We just name it a
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/scenes/Scene.js&quot;&gt;scene&lt;/a&gt;
instead of a tree.
And our element are called
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/core/Object3D.js&quot;&gt;Object3D&lt;/a&gt;.
But all that is just a matter of vocabulary.&lt;/p&gt;

&lt;p&gt;One one hand, jquery one, you got the dom and its tree of element.
on the other hand, three.js one, you got the scene and its tree of object3D.
Same Thing!&lt;/p&gt;

&lt;h2&gt;Chained API&lt;/h2&gt;

&lt;p&gt;jQuery got a chained API, so tQuery got a chained API. When we said
&lt;em&gt;copy jQuery whenever possible&lt;/em&gt;, we were not kidding :)&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery('.fooKlass').scale(2).translate(1,0,0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;IDs and classes&lt;/h2&gt;

&lt;p&gt;They got
&lt;a href=&quot;http://api.jquery.com/id-selector/&quot;&gt;Ids&lt;/a&gt;
and
&lt;a href=&quot;http://api.jquery.com/class-selector/&quot;&gt;classes&lt;/a&gt;
, or more recently
&lt;a href=&quot;http://api.jquery.com/data/&quot;&gt;data&lt;/a&gt;.
So we did all the same with tQuery.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var cube    = tQuery().createCube();
cube.id(&quot;myId&quot;);    // set the id of this element
cube.addClass('fooKlass');  // add 'fooKlass' class to this cube
cube.data('goom', 'baa');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Selector&lt;/h2&gt;

&lt;p&gt;jQuery got selectors so tQuery got selectors too.
Here are the selector based on geometry, they are similar to the
[element selector] in jQuery, e.g. &lt;code&gt;jQuery('span')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery('sphere');   // select all objects with a sphere gemotry
tQuery('cube'); // smae with a cube gemotry
// and so on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Here are the one for classes and id.
Note how the syntax is similar to css selector.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery('#myId') // to get the object with the 'myId' id
tQuery('.fooklass') // to get objects with the class 'fooklass'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;obvious we got compose them like with jQuery&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery('.bar.foo')  // objets with the class 'bar' and 'foo'
tQuery('.bar cube') // objets with the class 'bar' with a cube as descandant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Events&lt;/h2&gt;

&lt;p&gt;Obviously jQuery got events, so we got events in tQuery.
we use &lt;em&gt;domEvents&lt;/em&gt; we saw a few week back in
&lt;a href=&quot;http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space/&quot;&gt;'dom events in 3D space' post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tQuery('cube').on('mouseover', function(){
    console.log(&quot;somebody put the mouse over a cube&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;A Basic Page&lt;/h2&gt;

&lt;iframe src=&quot;http://jeromeetienne.github.com/tquery/plugins/minimal/examples&quot;
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width=&quot;260&quot; height=&quot;280&quot; frameborder=&quot;0&quot; style=&quot;float: right; margin-left: 1em;&quot;&gt;
&lt;/iframe&gt;


&lt;p&gt;This is a minimal page. the code is below, the preview on the right.
Quite short.&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;&amp;lt;title&amp;gt;tQuery Basic Page&amp;lt;/title&amp;gt;
&amp;lt;script src=&quot;tquery-bundle.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;script&amp;gt;

    var world = tQuery.createWorld().fullpage().start();
    var object = tQuery.createTorus().addTo(world);

    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was early presentation of tQuery. I like the idea, we will see how it goes.
The purpose of this experiement is to help those who know jQuery to use three.js.
So they reuse jquery syntax but inside a webgl context.
This is a very early project.
How far is it possible to push this concept of &lt;em&gt;&quot;three.js power + jQuery API usuability&quot;&lt;/em&gt;.
It seems all very cute at first sight but only time will tell.&lt;/p&gt;

&lt;p&gt;That's all folks. More on tQuery soon. Have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Fun With Live Video in WebGL</title>
    <link href="http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/"/>
    <updated>2012-02-07T13:41:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl</id>
    <content type="html">&lt;p&gt;This post is about live video in webgl.
It is possible in today browsers to read the webcam using a new feature from html5, called WebRTC.
This standard is
about real-time communications such video conferences.
It is an open source project supported by Google, Mozilla and Opera.
Quite neat hey!&lt;/p&gt;

&lt;p&gt;I think live video has a lot of potential usages in 3D.
It is so cool for interactivity.
The player sees himself on the screen. It becomes part of the actions.
Quite immersive effect.
We can imagine something like &lt;a href=&quot;http://secondlife.com/&quot;&gt;second life&lt;/a&gt;, where
people wander around and interact live with each other in a virtual world.
Our demo is about TV... Another obvious use may be
&lt;a href=&quot;http://en.wikipedia.org/wiki/Reflection_(physics)&quot;&gt;reflections&lt;/a&gt;
like
&lt;a href=&quot;http://en.wikipedia.org/wiki/Mirror&quot;&gt;mirror&lt;/a&gt;
or
&lt;a href=&quot;http://en.wikipedia.org/wiki/Specular_reflection&quot;&gt;water&lt;/a&gt;.
What about your face from the webcam reflecting in water with animated waves ?
Would be nice!&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/vnNihxl3taE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;p&gt;It is surely nice but WebRTC is still quite on the edge.
To enable webrtc on your computer, see how to
&lt;a href=&quot;http://www.webrtc.org/running-the-demos&quot;&gt;run webrtc demos&lt;/a&gt;.
It is currently available only in
&lt;a href=&quot;http://tools.google.com/dlpage/chromesxs&quot;&gt;Canari&lt;/a&gt;.
Mozilla people are working hard to make it happen as soon as possible.
So it may be too early to use it for 'serious' things.
But way enougth to do cool experiments like the one we gonna do today :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://learningthreejs.com/data/live-video-in-webgl&quot;&gt;Try it out&lt;/a&gt;!!
The first step will be to create a video element.
We gonna start to make it play either a normal video file
then to play video from the webcam using
&lt;a href=&quot;https://dvcs.w3.org/hg/audio/raw-file/tip/streams/StreamProcessing.html&quot;&gt;mediastream API&lt;/a&gt;.
After that, we gonna map this video to a normal texture.
And we will be done !
It is that simple, now let's get started.&lt;/p&gt;

&lt;h2&gt;Let's create the video element&lt;/h2&gt;

&lt;p&gt;The
&lt;a href=&quot;http://en.wikipedia.org/wiki/HTML5_video&quot;&gt;video element&lt;/a&gt;
is the DOM way to handle video in webpage.
Let's create the video element.
Later we will use it as texture and display it in WebGL.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;video       = document.createElement('video');
video.width = 320;
video.height    = 240;
video.autoplay  = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;It you wish to create a video from a file webm, mp4 or ogv, just set
its &lt;code&gt;.src&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;video.src = &quot;http://example.com/supercatvideo.webm&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;It wasn't too hard, hey :) So now we know how to get a video from a file.
Let's see if we can use the webcam and get this nice immersive effect for our
users.&lt;/p&gt;

&lt;h2&gt;Let's Use the Webcam if Available&lt;/h2&gt;

&lt;p&gt;Our first step is to detect if the media stream API is available.
The following line will do the job nicely.
&lt;code&gt;hasUserMedia&lt;/code&gt; will be true if it is available, false otherwise.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var hasUserMedia = navigator.webkitGetUserMedia ? true : false;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;If it isn't, you may point the users to
&lt;a href=&quot;http://www.webrtc.org/running-the-demos&quot;&gt;this doc&lt;/a&gt;
on how to get it
and/or using a normal video file.
Now we need to check if we can read the webcam.
For that, we use the following lines.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;navigator.webkitGetUserMedia('video', function(stream){
    video.src   = webkitURL.createObjectURL(stream);
}, function(error){
    console.log(&quot;Failed to get a stream due to&quot;, error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;A pseudo URL will be created by &lt;code&gt;.createObjectURL&lt;/code&gt;.
It would allows the video element to automagically read the webcam.
It looks a bit like that.&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blob:http%3A//learningthreejs.com/e33eb278-08a8-4052-9dca-3c7663c88bc0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Handle the textures&lt;/h2&gt;

&lt;p&gt;Now we got the &lt;a href=&quot;https://developer.mozilla.org/En/HTML/Element/Video&quot;&gt;video element&lt;/a&gt; ready.
Let's create a texture using it as source.
The last step before seeing the video moving on screen :)
Use this simple line. It is enougth.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var videoTexture = new THREE.Texture( video );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;This texture is a normal texture and can be used as usual in materials.
For example, in a &lt;a href=&quot;http://en.wikipedia.org/wiki/Lambertian_reflectance&quot;&gt;lambert&lt;/a&gt; material.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var material    = new THREE.MeshLambertMaterial({
    map : videoTexture
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;But this texture is special, it is a video. So it need to be constantly updated.
In your render loop, add those lines. They monitor the state of your video.
Every time the video got enougth data to be display, the texture is updated
and sent to the GPU.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if( video.readyState === video.HAVE_ENOUGH_DATA ){
    videoTexture.needsUpdate = true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you can display your webcam inside your webgl !!
This is simple and cool.
Browser support will increase with time.
Live video is a very powerfull tool.
The image from the webcam is a normal one.
On it, you can perform
&lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/examples/js/postprocessing&quot;&gt;post processing&lt;/a&gt;,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Edge_detection&quot;&gt;edge detection&lt;/a&gt;,
and many other crazy things. Up to you to experiment.
Let's all for today folks, have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Casting Shadows</title>
    <link href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/"/>
    <updated>2012-01-20T14:44:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/01/20/casting-shadows</id>
    <content type="html">&lt;p&gt;This post is about
&lt;a href=&quot;http://en.wikipedia.org/wiki/Shadow_mapping&quot;&gt;shadow casting&lt;/a&gt;,
a technique which approximates the effect you see in real life everyday.
They may be tricky to tune but they looks so good, it worths it.
Shadows are an efficient tool when you to make your scene more realistic.
We will see how they can be used inside
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
and see more about lights while we are at it.&lt;/p&gt;

&lt;p&gt;As usual, there is a &lt;a href=&quot;http://learningthreejs.com/data/casting-shadows/&quot;&gt;demo&lt;/a&gt;.
It is kept it real simple thus you can read the code more easily.
The scene is a simple object in the middle, a spotlight moving around and a plane
to receive the object shadow. The light frustum is left visible in orange.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;iframe src=&quot;http://learningthreejs.com/data/casting-shadows&quot;
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width=&quot;100%&quot; height=&quot;420&quot; frameborder=&quot;0&quot;&gt;
&lt;/iframe&gt;


&lt;h2&gt;Let's Code Shadows&lt;/h2&gt;

&lt;p&gt;Casting shadows in
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
involves 3 parts: the
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/renderers/WebGLRenderer.js&quot;&gt;renderer&lt;/a&gt;
which does the computation, the
&lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/src/lights&quot;&gt;lights&lt;/a&gt;
which cast shadows, and
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/core/Object3D.js&quot;&gt;objects&lt;/a&gt;
which receives lights and shadows.&lt;/p&gt;

&lt;h2&gt;Set up the Renderer&lt;/h2&gt;

&lt;p&gt;The renderer is the one which will compute the shadows positions for your 3D scene.
Shadow casting is quite expensive. It is only supported by
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/renderers/WebGLRenderer.js&quot;&gt;WebGLRenderer&lt;/a&gt;.
It uses
&lt;a href=&quot;http://en.wikipedia.org/wiki/Shadow_mapping&quot;&gt;Shadow mapping&lt;/a&gt;, a technique specific
to WebGL, performed directly on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Graphics_processing_unit&quot;&gt;GPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;renderer.shadowMapEnabled = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/casting-shadows/images/screenshot-withsoftshadow-small.png' width='' height='' alt='' title=''&gt;
&lt;img class='left ' src='http://learningthreejs.com/data/casting-shadows/images/screenshot-nosoftshadow-small.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;You can smooth produced shadows with &lt;code&gt;shadowMapSoft&lt;/code&gt;. It default to false.
On the left, the shadow is crisp, on the right it is soft.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// to antialias the shadow
renderer.shadowMapSoft = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Configure your objects&lt;/h2&gt;

&lt;p&gt;For
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/core/Object3D.js&quot;&gt;Object3D&lt;/a&gt;,
two parameters controls how they interact with lights and shadows.
Set &lt;code&gt;.castShadow&lt;/code&gt; to true if the object occludes light, so to cast a shadow.
Set &lt;code&gt;.receiveShadow&lt;/code&gt; to true if the object is supposed to receive shadows.
Both default to false&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object3d.castShadow = true;
object3d.receiveShadow  = false;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;This is the configuration for the central object in the demo. It will occlude lights but
won't be able to receive shadow. So you wont see any
&lt;a href=&quot;http://en.wikipedia.org/wiki/Self-shadowing&quot;&gt;self shadow&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Tune your Lights&lt;/h2&gt;

&lt;p&gt;&lt;img class='left  ' src='http://learningthreejs.com/data/casting-shadows/images/light-directionallight-small.jpg' width='' height='' alt='' title=''&gt;
&lt;img class='right ' src='http://learningthreejs.com/data/casting-shadows/images/light-spotlight-small.jpg' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/lights/DirectionalLight.js&quot;&gt;THREE.DirectionalLight&lt;/a&gt;
or
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/lights/SpotLight.js&quot;&gt;THREE.SpotLight&lt;/a&gt;
are able to cast shadows.
Let's details them.
A directional light is when light rays are parallel.
A bit like when you look at the sun rays on the left.
It mostly behaves like a light source very far from us.
A spot light is when light rays seems to originate from a single point, and
spreads outward in a coned direction, like in the dance club on the right
(Images are from wikipedia).
To enable the shadow casting on a light,
just use this line.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;light.castShadow = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;You can tune the &lt;code&gt;shadowDarkness&lt;/code&gt;.
It is the opacity of the shadow. 0 means no shadow, 1 means pure back shadow.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;light.shadowDarkness = 0.5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/casting-shadows/images/screenshot-shadowCameraVisible-small.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;In the same vibe, it possible to show the shadow camera on the screen
with &lt;code&gt;shadowCameraVisible&lt;/code&gt;.
A very usefull feature during tuning or debugging.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;light.shadowCameraVisible = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;More of Directional Lights&lt;/h2&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/casting-shadows/images/screenshot-fustrum-orthographic-small.png' width='' height='' alt='' title=''&gt;
&lt;img class='left  ' src='http://learningthreejs.com/data/casting-shadows/images/screenshot-fustrum-perspective-small.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;Additionally, when casting shadow with a
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/lights/DirectionalLight.js&quot;&gt;THREE.DirectionalLight&lt;/a&gt;,
you need to setup an orthographic camera.
What is that ? it is a different form of
&lt;a href=&quot;http://en.wikipedia.org/wiki/3D_projection&quot;&gt;3D projection&lt;/a&gt;.
&lt;a href=&quot;http://en.wikipedia.org/wiki/Perspective_(graphical)&quot;&gt;Perspective&lt;/a&gt;
is the way we see things in real life.
So it seems more natural to us than
&lt;a href=&quot;http://en.wikipedia.org/wiki/Orthographic_projection&quot;&gt;orthographic projection&lt;/a&gt;.
On the left, an illustration shows a perspective projection.
You can see what is inside the orange shape.
On the right, the same for a orthographic one.&lt;/p&gt;

&lt;p&gt;Recent
&lt;a href=&quot;https://github.com/mrdoob/three.js/commit/32b581f24fddeaf9e91b7825aa93ec0ad3a45c83&quot;&gt;three.js r47 release&lt;/a&gt;
includes a
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_camera.html&quot;&gt;very didactic example&lt;/a&gt;
from
&lt;a href=&quot;http://alteredqualia.com/&quot;&gt;alteredq&lt;/a&gt;.
Play with it, it may understand the difference between
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/cameras/OrthographicCamera.js&quot;&gt;orthographic&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/cameras/PerspectiveCamera.js&quot;&gt;perspective&lt;/a&gt;
cameras.
Here is a possible configuration of the frustum for the orthographic camera of our light.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;light.shadowCameraRight     =  5;
light.shadowCameraLeft      = -5;
light.shadowCameraTop       =  5;
light.shadowCameraBottom    = -5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is it, you can code shadow casting in three.js now :)
Go ahead and play with them. They are hard to master but very efficient visually.
Keep in mind that those shadows aren't real.
They only uses
&lt;a href=&quot;http://en.wikipedia.org/wiki/Shadow_mapping&quot;&gt;'some tricks'&lt;/a&gt;
to make them appears as real. And they do so in real time !!
To achieve this result, they take significant shortcuts which
produce artifacts. To avoid those require tuning and experience.&lt;/p&gt;

&lt;p&gt;That's all for today folks. Have fun.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Boilerplate Builder for Three.js</title>
    <link href="http://learningthreejs.com/blog/2012/01/19/boilerplate-builder-for-three-js/"/>
    <updated>2012-01-19T10:59:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/01/19/boilerplate-builder-for-three-js</id>
    <content type="html">&lt;p&gt;We recently introduced a
&lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate&quot;&gt;boilerplate for three.js&lt;/a&gt;
in a
&lt;a href=&quot;http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/&quot;&gt;previous post&lt;/a&gt;.
It aims to ease your first contact with
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;.
It contains a template for a simple project,
a sample on which we already applied good practices.
You download it and run it in a matter of minutes.
Thus you can immediatly focus on your own things.
In short, it aims for &lt;em&gt;Fast bootstrap + Good Practices&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It seems nice, hey ?
Well there is a glitch.
The
&lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate&quot;&gt;boilerplate for three.js&lt;/a&gt;
needs more flexibily.
In a way, it acts as a ground on top of which you start your own thing.
We do our best to provide good defaults, but they are only defaults.
What if you got specific requirements ?
How to start your project then ?
The
&lt;a href=&quot;http://jeromeetienne.github.com/threejsboilerplatebuilder/&quot;&gt;boilerplate builder&lt;/a&gt;
has been written for you :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jeromeetienne.github.com/threejsboilerplatebuilder/&quot;&gt;Try it out&lt;/a&gt;.
Go ahead, play with the options,
discover what they do and customize your own boilerplate.
The
&lt;a href=&quot;http://www.youtube.com/watch?v=ANnPWZGRsGk&quot;&gt;screencast&lt;/a&gt;
below is short introduction where i describe the
&lt;a href=&quot;http://jeromeetienne.github.com/threejsboilerplatebuilder/&quot;&gt;boilerplate builder&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/ANnPWZGRsGk?hl=en&amp;fs=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;Making-Of the Builder&lt;/h2&gt;

&lt;p&gt;The
&lt;a href=&quot;http://jeromeetienne.github.com/threejsboilerplatebuilder/&quot;&gt;builder&lt;/a&gt;
itself was interesting to build.
It uses various nice features from the current web.
It is a pure-browser webapp with a file download,
a preview of a webgl project
and a nice looking visual appearance.&lt;/p&gt;

&lt;h3&gt;Pure Browser Download&lt;/h3&gt;

&lt;p&gt;I like to write pure-browser application.
They dont require a server to run, only static files.
It makes it much easier to host your application.
So
&lt;a href=&quot;http://jeromeetienne.github.com/threejsboilerplatebuilder/&quot;&gt;boilerplate builder&lt;/a&gt;
has been written as a pure-browser application :)
It uses
&lt;a href=&quot;http://jszip.stuartk.co.uk/&quot;&gt;jszip&lt;/a&gt;
, a library which create .zip files with Javascript.
Its creates the boilerplater.zip that you download.
Additionally, it uses
&lt;a href=&quot;https://github.com/dcneiner/Downloadify&quot;&gt;downloadify&lt;/a&gt;
, a small library to create and download files without server.&lt;/p&gt;

&lt;p&gt;Together,
&lt;a href=&quot;http://jszip.stuartk.co.uk/&quot;&gt;jszip&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/dcneiner/Downloadify&quot;&gt;downloadify&lt;/a&gt;
makes it easy to pack several files together,
and allow the user to download it.
All that in pure-browser, neat no?
I love what the web is becoming!&lt;/p&gt;

&lt;h3&gt;Boilerplate Preview&lt;/h3&gt;

&lt;p&gt;The preview is a bit different.
We start to load the &lt;em&gt;index.html&lt;/em&gt; template for the boilerplate.
We apply all the options you configured and produce the final version.
To actually preview this file, we encode it in
&lt;a href=&quot;http://en.wikipedia.org/wiki/Base64&quot;&gt;base64&lt;/a&gt;
to build a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Data_URI_scheme&quot;&gt;data url&lt;/a&gt;
with it.
Only then, we create an iframe with this data uri
and you can see the webgl preview :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Data_URI_scheme&quot;&gt;Data url&lt;/a&gt;
is &lt;a href=&quot;http://tools.ietf.org/html/rfc2397&quot;&gt;an old thing from 1998&lt;/a&gt;
which is back in spotlight due to HTML5.
It allows to encode data directly in the URL.
It may be used to include image directly in css for examples.
Very usefull but not for human consumption.
To give you an idea, here is
&lt;a href=&quot;http://pastebin.com/yF3XDSFW&quot;&gt;index.html&lt;/a&gt;
as a data url in
&lt;a href=&quot;http://en.wikipedia.org/wiki/Base64&quot;&gt;base64&lt;/a&gt;.
You could encode it as text if you
&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/encodeURI&quot;&gt;escape&lt;/a&gt;
it
&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/encodeURIComponent&quot;&gt;properly&lt;/a&gt;.
It looks like long ugly random string.&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data:text/html;base64,PCFkb2N0eXBlIGh0....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h3&gt;Visual Appearance&lt;/h3&gt;

&lt;p&gt;It includes
&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;twitter bootstrap&lt;/a&gt; for css.
I am quite grateful for this framework.
Without it, the
&lt;a href=&quot;http://jeromeetienne.github.com/threejsboilerplatebuilder/&quot;&gt;builder page&lt;/a&gt;
will be so ugly, that people run away without even trying the application itself.
&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;twitter bootstrap&lt;/a&gt;
makes it so easy to write a webapp which looks good on the screen.
I think all the css-impaired of the world should thanks twitter for this framework :)&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It has been quite fun to write it.
I learned some web skills,
discovered new part of three.js,
and on top of that, it looks good on screen.
I could not ask for more.
The goal of
&lt;a href=&quot;http://jeromeetienne.github.com/threejsboilerplatebuilder/&quot;&gt;boilerplate builder for three.js&lt;/a&gt;
is to add more &lt;em&gt;flexibility&lt;/em&gt; to the &lt;em&gt;fast bootstrap + good practices&lt;/em&gt; from the
&lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate&quot;&gt;boilerplate&lt;/a&gt;.
I hope it will help people starting lots of new
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
projects :)&lt;/p&gt;

&lt;p&gt;That's all folks.
Have fun.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dom Events in 3D Space</title>
    <link href="http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space/"/>
    <updated>2012-01-17T11:56:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space</id>
    <content type="html">&lt;p&gt;Ever dreamed of a &lt;strong&gt;object3d.on('click', function(){ ... });&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;I have :) This post presents a little experiment.
What about implementing the concept of
&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html&quot;&gt;dom events&lt;/a&gt;
in 3D Space.
In a web page, a
&lt;a href=&quot;http://www.quirksmode.org/dom/events/click.html&quot;&gt;click&lt;/a&gt;
event is trigger when a user click on a
&lt;a href=&quot;http://en.wikipedia.org/wiki/HTML_element&quot;&gt;element&lt;/a&gt;.
This is common knowledge in web development.
What about having that but in a three.js scene ?
Maybe people will start do 3D user interface with that, who knows.
How great would that be ?!?
So let's do that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jeromeetienne.github.com/threex/examples/threex.domevent/&quot;&gt;Try it out&lt;/a&gt;.
The demo contains 3 teapots.
Each bind a different type of events.
When the events are triggered, teapots are animated.
Animations are made by &lt;a href=&quot;https://github.com/sole/tween.js/&quot;&gt;tween.js&lt;/a&gt;, a nice js tweening engine
seen in a &lt;a href=&quot;http://learningthreejs.com/blog/2011/08/17/tweenjs-for-smooth-animation/&quot;&gt;previous post&lt;/a&gt;.
Play with it to get a feel of it, maybe think about the type of UI you could do in 3D.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/c2KLj8sie9Q?hl=en&amp;fs=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;Let's Get Started&lt;/h2&gt;

&lt;p&gt;First let's include the source.
You download &lt;a href=&quot;https://github.com/jeromeetienne/threex/blob/master/threex.domevent.js&quot;&gt;threex.domevent.js&lt;/a&gt;.
and copy this line in your page.&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src='threex.domevent.js'&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Let's Use It&lt;/h2&gt;

&lt;iframe src=&quot;http://jeromeetienne.github.com/threex/examples/threex.domevent&quot;
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot; style=&quot;float: right; margin-left: 1em;&quot;&gt;
&lt;/iframe&gt;


&lt;p&gt;Let's say we want do to an action when the user is clicking on a object.
We just do the following.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mesh.on('click', function(){
    mesh.scale.x *= 2;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;This short line means &quot;&lt;em&gt;if the user click on this mesh, make it twice wider&lt;/em&gt;&quot;.
Eloquent meaning, short syntax ... pretty sweet in my book.
If you wish to stop listening just do as usual.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mesh.off('click', callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;In fact, there is 2 naming for those functions:
one is
&lt;a href=&quot;https://developer.mozilla.org/en/DOM/element.addEventListener&quot;&gt;addEventListener&lt;/a&gt;
/
&lt;a href=&quot;https://developer.mozilla.org/en/DOM/element.removeEventListener&quot;&gt;removeEventListener&lt;/a&gt;
from
&lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html&quot;&gt;HTMLElement&lt;/a&gt;
The other is copied on
&lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; api:
&lt;a href=&quot;http://api.jquery.com/on/&quot;&gt;on&lt;/a&gt;
/
&lt;a href=&quot;http://api.jquery.com/off/&quot;&gt;off&lt;/a&gt;
Pick the one you like. They are doing the same thing.&lt;/p&gt;

&lt;p&gt;Always in a effort to stay close to usual pratices, the events name are the same as in DOM.
The semantic is the same too.
Currently, the available events are
&lt;a href=&quot;http://www.quirksmode.org/dom/events/click.html&quot;&gt;click, dblclick, mouseup, mousedown&lt;/a&gt;,
&lt;a href=&quot;http://www.quirksmode.org/dom/events/mouseover.html&quot;&gt;mouseover and mouse out&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Some Internals&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
already has the ability to interact with the mouse.
You can see it in action
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_interactive_cubes.html&quot;&gt;here&lt;/a&gt;
and
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_interactive_voxelpainter.html&quot;&gt;here&lt;/a&gt;.
Internally they use 2 three.js classes:
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/core/Projector.js&quot;&gt;THREE.Projector&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/core/Ray.js&quot;&gt;THREE.Ray&lt;/a&gt;.
&lt;a href=&quot;https://github.com/jeromeetienne/threex/blob/master/threex.domevent.js&quot;&gt;threex.domevent.js&lt;/a&gt;
is an higher level api on top of those functions,
an interface which mimic dom events,
something closer to the usual web developper.&lt;/p&gt;

&lt;p&gt;It is a nice api. clean, short, object oriented and feels familiar to web developpers.
A little hichup tho, it modifies THREE.Object3D class.
It is a global class, so it may be legitimatly considered unclean by some people.
If this bother you, simply do &lt;code&gt;THREEx.DomEvent.noConflict()&lt;/code&gt; and use the
standalone API. It is documented in the
&lt;a href=&quot;http://jeromeetienne.github.com/threex/docs/threex.domevent.html&quot;&gt;annoted source&lt;/a&gt;.
In fact, the object oriented API is just a thin wrapper
on top of the standalone API.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We all know the click event when the user click on a webpage.
This experiment wishes to provide to web developpers the same experience in 3D.
I hope people will do crazy innovations by using 3D in user interfaces.
This is a first version. Maybe we will implement
&lt;a href=&quot;http://www.quirksmode.org/js/events_order.html&quot;&gt;bubbling&lt;/a&gt;
in the future, even events like
&lt;a href=&quot;http://www.quirksmode.org/dom/events/change.html&quot;&gt;'change'&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href=&quot;https://github.com/jeromeetienne/threex/blob/master/threex.domevent.js&quot;&gt;threex.domevent.js&lt;/a&gt;
source is available on
&lt;a href=&quot;https://github.com/jeromeetienne/threex/blob/master/threex.domevent.js&quot;&gt;github&lt;/a&gt;.
There is an
&lt;a href=&quot;http://jeromeetienne.github.com/threex/docs/threex.domevent.html&quot;&gt;annoted source&lt;/a&gt;
for implementation details.
That's all folks. Have fun.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Tunnel Effect for your Demo</title>
    <link href="http://learningthreejs.com/blog/2012/01/11/tunnel-effect/"/>
    <updated>2012-01-11T13:00:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/01/11/tunnel-effect</id>
    <content type="html">&lt;p&gt;This post presents a tunnel effect.
This is a classic in 3D demo.
They are visually efficient and easy to code.
In fact, tunnels are so trendy that
even
&lt;a href=&quot;http://en.wikipedia.org/wiki/Doctor_Who&quot;&gt;doctor who&lt;/a&gt;
and
&lt;a href=&quot;http://en.wikipedia.org/wiki/Stargate&quot;&gt;stargate&lt;/a&gt;
have
&lt;a href=&quot;http://www.youtube.com/watch?v=IKo9f5npLNM&quot;&gt;fun&lt;/a&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=KDIdJtW0vN4&quot;&gt;in them&lt;/a&gt;
:)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jeromeetienne.github.com/tunnelgl/&quot;&gt;Try the demo&lt;/a&gt;.
It has been built using the
&lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate&quot;&gt;boilerplate for three.js&lt;/a&gt;
seen in a
&lt;a href=&quot;http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/&quot;&gt;previous post&lt;/a&gt;.
The code is simple and small.
Less than 20lines has been added on top of the boilerplate.
We will create a
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/core/Geometry.js&quot;&gt;THREE.Geometry&lt;/a&gt;
to get the shape of tunnel.
Then we will use a
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/textures/Texture.js&quot;&gt;texture&lt;/a&gt;
trick to create the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Optical_illusion&quot;&gt;visual illusion&lt;/a&gt;
of moving.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;iframe src=&quot;http://jeromeetienne.github.com/tunnelgl/&quot;
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width=&quot;100%&quot; height=&quot;420px&quot; frameborder=&quot;0&quot;&gt;
&lt;/iframe&gt;


&lt;h2&gt;Let's build the walls&lt;/h2&gt;

&lt;p&gt;The first step is to build the &lt;em&gt;walls&lt;/em&gt; of the tunnel.
It is easier that one would expect.
A tunnel may be seen as a cylinder with the camera inside.
Once you realized that, most of the work is done.
Luckily for us,
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
got an easy way to build cylinders, called
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/extras/geometries/CylinderGeometry.js&quot;&gt;CylinderGeometry&lt;/a&gt;.
Nevertheless our tunnel / cylinder got 2 special points.&lt;/p&gt;

&lt;p&gt;First, it is open-ended. So we must not build its top and bottom.
We need this to see thru its extremities.
This is handled by a parameter in
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/extras/geometries/CylinderGeometry.js&quot;&gt;CylinderGeometry&lt;/a&gt;.
We just set &lt;code&gt;openended&lt;/code&gt; parameter to true and the rest is done for us :)&lt;/p&gt;

&lt;p&gt;Second, the camera is usually located outside of objects.
But our tunnel/cylinder has the camera inside it.
To make our object visible from the inside, we need to turn it inside out.
For that, just use &lt;code&gt;mesh.flipSided = true&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Let's go forward&lt;/h2&gt;

&lt;p&gt;Now we need to go forward in this tunnel
For that we will use an old trick.
We won't move the tunnel walls themselves, only their appearance.
It gives the visual illusion that we are moving.
Remember what they say in matrix ?
&lt;a href=&quot;http://www.youtube.com/watch?v=dzm8kTIj_0M&quot;&gt;&quot;there is no spoon&quot;&lt;/a&gt;.
It is all the same, we are moving while staying still :)&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/dzm8kTIj_0M?hl=en&amp;fs=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;A Texture isn't a spoon&lt;/h2&gt;

&lt;p&gt;First we want to move the appearance of the cylinder, thus the player got the illusion to go forward.
We will use &lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/textures/Texture.js&quot;&gt;THREE.Texture&lt;/a&gt; for that.
We wont move the actual pixels of the textures, only its coordinates.
Additionnaly we want the texture to repeat on the cylinder, thus it appears as continuous.
WebGL texture is a powerfull and flexible tool.
You can tweak so many features.&lt;/p&gt;

&lt;p&gt;First let's make this texture move.
Suppose we want the texture to loop once every 10 seconds.
So the coordinate &lt;code&gt;.offset.y&lt;/code&gt; needs to go from 0 to 1 in 10 seconds.
This line is enougth to make the tunnel move forward.
You can change your speed within the tunnel by changing this number.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;texture.offset.y    += 0.1 * seconds;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now the texture repetition.
For that we will use a texture parameter called &lt;em&gt;wrap&lt;/em&gt;.
It indicates how the gpu repeat the texture on a face.
Here is a good
&lt;a href=&quot;http://lucera-project.blogspot.com/2010/06/opengl-wrap.html&quot;&gt;tutorial on opengl wrap&lt;/a&gt;.
By default, wrapS / wrapT are set to &lt;code&gt;THREE.ClampToEdgeWrapping&lt;/code&gt;.
So the texture is scaled to match exactly the size of the face.
In our case, we want to repeat the texture and not scale it.
So we use &lt;code&gt;THREE.RepeatWrapping&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;texture.wrapT   = THREE.RepeatWrapping;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We have seen how to do a tunnel with
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;.
This is very simple to code and awesome on the screen.
It is less than 20 lines added to the &lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate&quot;&gt;boilerplate&lt;/a&gt;.
The cylinder geometry was already provided.
We used
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/textures/Texture.js&quot;&gt;THREE.Texture&lt;/a&gt;
offsets to provide the optical illusion of moving.&lt;/p&gt;

&lt;p&gt;Later, we may add a &lt;a href=&quot;http://en.wikipedia.org/wiki/TARDIS&quot;&gt;blue phonebooth&lt;/a&gt;
and play &lt;em&gt;doctor who&lt;/em&gt; :)
The code is available on
&lt;a href=&quot;https://github.com/jeromeetienne/tunnelgl&quot;&gt;github&lt;/a&gt;
under MIT license.
Feel free to fork and modify.
That's all folks, have fun.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Let’s Make a 3D Game: Supporting Mobile</title>
    <link href="http://learningthreejs.com/blog/2011/12/28/let-s-make-a-3d-game-supporting-mobile/"/>
    <updated>2011-12-28T13:46:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/12/28/let-s-make-a-3d-game-supporting-mobile</id>
    <content type="html">&lt;p&gt;This post is about supporting mobile.
We will try to port &lt;a href=&quot;http://marblesoccer.com&quot;&gt;marblesoccer&lt;/a&gt; on mobile.
When doing a
&lt;a href=&quot;http://127.0.0.1:8000/blog/2011/12/20/boilerplate-for-three-js/&quot;&gt;boilerplate for three.js&lt;/a&gt;,
mobile had to be supported for compatibility.
So it gave me the idea of this post.
What about porting our game on mobile ?
Porting a 3D web game to mobile ? crazy :)&lt;/p&gt;

&lt;p&gt;The desktop version looks kindof ok.
What would be the result of this experiment ?
Is that even possible ?
What about usable ?
This is the purpose of this experiment to find out.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/Ow_ceac1aEE?hl=en&amp;fs=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;Mobile isn't desktop&lt;/h2&gt;

&lt;p&gt;Indeed... desktop and mobile are quite different plateforms.
Which differences are relevant to us ?
First, mobile network is bad, especially latency.
So avoid download of long files, such as texture or sound.
Here is a good talk on
&lt;a href=&quot;http://www.youtube.com/watch?v=L2YqfVNHQO4&quot;&gt;Mobile Web Performance&lt;/a&gt;.
Another thing, mobile got no keyboard, no mouse, but a touch screen
We need to get a game controller for this environement.
We use &lt;a href=&quot;https://github.com/jeromeetienne/virtualjoystick.js&quot;&gt;virtualjoystick.js&lt;/a&gt;.
See details in our &lt;a href=&quot;http://learningthreejs.com/blog/2011/12/26/let-s-make-a-3d-game-virtual-joystick/&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One big thing is that currently, on mobile, WebGL hasnt reached mainstream to say the least.
No major vendor is shipping phone with webgl, so nobody or close get webgl on phone.
So for our little experiment, we will display in
&lt;a href=&quot;http://www.w3.org/TR/2010/WD-2dcontext-20100304/&quot;&gt;Canvas 2D&lt;/a&gt;
with
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/renderers/CanvasRenderer.js&quot;&gt;THREE.CanvasRenderer&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Porting to canvas 2D&lt;/h2&gt;

&lt;p&gt;So what need to be done ?
First step is to use the proper renderer when suitable.
Second is fixing material and geometry to fit canvas2D renderer capability.
Last step is to look for room of optimisations.
Ok now let's intanciate the renderer. If webgl is available, use
&lt;code&gt;THREE.WebGLRenderer&lt;/code&gt;
else use
&lt;code&gt;THREE.CanvasRenderer&lt;/code&gt;.
Not too hard hey ?
We already did that in the
&lt;a href=&quot;http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/&quot;&gt;boilerplate for three.js&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&quot;http://marblesoccer.com?render=canvas&amp;bypasslanding=1&quot;
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot; style=&quot;float: right; margin-left: 1em;&quot;&gt;
&lt;/iframe&gt;


&lt;p&gt;We simplify geometry to reduce the number of polygon.
For marble geometry, the sphere got 512 faces on webgl, and only 9 on canvas2d.
Drastic :)
What about material ? For webgl, we used
&lt;a href=&quot;http://en.wikipedia.org/wiki/Phong_shading&quot;&gt;phong&lt;/a&gt;
for fancy lightings,
We used
&lt;a href=&quot;http://en.wikipedia.org/wiki/Texture_mapping&quot;&gt;textures&lt;/a&gt;
for realistic effects.
But with canvas2D, those technics cant be used.
They are way too slow.&lt;/p&gt;

&lt;p&gt;This is enougth to get it working.
It display something reasonable on the screen at least.
We sacrifice a lot tho, no more texture not fancy lighting.
And now the bad new, it results in 3fps on my ipad2 ios4... ouch.&lt;/p&gt;

&lt;h2&gt;More measures&lt;/h2&gt;

&lt;p&gt;How come performances are so bad ? So i did more measures.
I disabled the display of map and marbles to see how they impact performance.
If we display the map and the marbles, we got 3fps on my ipad2.
If we display only marbles, no more maps, we got 23fps, much better.
but still not great... Considere that we are only displaying marbles and they are real simple.&lt;/p&gt;

&lt;p&gt;If we display no marble, and no map. we got only 30fps. So all the rest, all the non display
part is already using a big part of time ? what are we doing ? not much...
Still we run
&lt;a href=&quot;http://learningthreejs.com/blog/2011/10/17/lets-make-a-3d-game-microphysics-js/&quot;&gt;realistic 3D physics&lt;/a&gt;
and ipad2 cpu isnt as fast as usual desktop ones.&lt;/p&gt;

&lt;h2&gt;Time to optimize&lt;/h2&gt;

&lt;p&gt;Ok it is slow but this is a first try.
I admit the code isnt not too optimized.
&lt;a href=&quot;http://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;cpu&lt;/a&gt;
/
&lt;a href=&quot;http://en.wikipedia.org/wiki/Graphics_processing_unit&quot;&gt;gpu&lt;/a&gt;
performance are so good on desktop, i may have been sloppy here and there :)
There are areas of optimisations.
We need to draw less polygons.&lt;/p&gt;

&lt;p&gt;First we need to &lt;em&gt;reduce the geometry&lt;/em&gt; of the map.
We can do that by clustering voxels:
if 2 voxels got the same color and touch each other, display one large box, instead of 2 small boxes.
We did it to optimize our physics.
See details in &lt;a href=&quot;http://learningthreejs.com/blog/2011/10/17/lets-make-a-3d-game-microphysics-js/&quot;&gt;microphysics post&lt;/a&gt;.
Additionnaly we could use marblesoccer's
&lt;a href=&quot;http://127.0.0.1:8000/blog/2011/09/14/lets-make-a-3D-game-map-editor/&quot;&gt;map editor&lt;/a&gt;
to redesign a map with a simpler geometry.&lt;/p&gt;

&lt;p&gt;Another low-hanging fruit is to remove faces which are never seen, like in
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_geometry_minecraft_ao.html&quot;&gt;minecraft example&lt;/a&gt;
from
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;.
We could try to 2D sprites instead of 3D spheres for marble.
We wont use
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/objects/Sprite.js&quot;&gt;THREE.Sprite&lt;/a&gt;.
It isnt supported
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/renderers/CanvasRenderer.js&quot;&gt;THREE.CanvasRenderer&lt;/a&gt;.
But dont worry, it is possible with the particle system.
See how &lt;code&gt;THREE.Particle&lt;/code&gt; is used in
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/canvas_particles_sprites.html&quot;&gt;canvas_particles_sprites.html&lt;/a&gt;
example.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;And after all that, what can you expect ?
Will that run at 60fps ? 30fps ? Not likely or it will require a lot of effort.
&lt;img class='left ' src='http://learningthreejs.com/data/lets-make-a-3d-game-supporting-mobile/images/screenshot-webgl-small.png' width='' height='' alt='' title=''&gt;
&lt;img class='right ' src='http://learningthreejs.com/data/lets-make-a-3d-game-supporting-mobile/images/screenshot-canvas-small.png' width='' height='' alt='' title=''&gt;
So animations arent smooth, what about the look?
Watch what you got on the screen...
On the right, a canvas version. &lt;a href=&quot;http://marblesoccer.com/?render=canvas&quot;&gt;live here&lt;/a&gt;.
On the left you can see a webgl version. &lt;a href=&quot;http://marblesoccer.com&quot;&gt;live here&lt;/a&gt;.
Lets face it... &lt;em&gt;canvas version is ugly&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After a significant work, you get poor performance and crappy look.
Not many players would accept that...
currently canvas performance doesnt seems suitable to display 3D on mobile.
It is a good way to monitor performances and see how they evolve with time.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Let’s Make a 3D Game: Virtual Joystick</title>
    <link href="http://learningthreejs.com/blog/2011/12/26/let-s-make-a-3d-game-virtual-joystick/"/>
    <updated>2011-12-26T12:21:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/12/26/let-s-make-a-3d-game-virtual-joystick</id>
    <content type="html">&lt;p&gt;Here is another article of the &quot;Let's Make a 3D Game&quot;
&lt;a href=&quot;http://learningthreejs.com/blog/categories/tutorial3dgame/&quot;&gt;series&lt;/a&gt;.
We have already seen how to handle other inputs like
&lt;a href=&quot;http://learningthreejs.com/blog/2011/09/12/lets-Make-a-3D-game-keyboard/&quot;&gt;keyboard&lt;/a&gt;
and
&lt;a href=&quot;http://learningthreejs.com/blog/2011/09/20/lets-make-a-3D-game-device-orientation/&quot;&gt;device orientation&lt;/a&gt;.
This post is about &lt;a href=&quot;https://github.com/jeromeetienne/virtualjoystick.js&quot;&gt;virtualjoystick.js&lt;/a&gt;
It &lt;strong&gt;virtual joystick&lt;/strong&gt;, another input you can use for your games.
A virtual joystick emulates a joystick behaviour on a touch screen.
&lt;a href=&quot;https://github.com/jeromeetienne/virtualjoystick.js&quot;&gt;virtualjoystick.js&lt;/a&gt;
has been coded in a effort to port
&lt;a href=&quot;http://marblesoccer.com&quot;&gt;marblesoccer&lt;/a&gt;
to mobile device.
Show, dont tell,
&lt;a href=&quot;http://jeromeetienne.github.com/virtualjoystick.js/&quot;&gt;Try it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This
&lt;a href=&quot;http://jeromeetienne.github.com/virtualjoystick.js/&quot;&gt;demo&lt;/a&gt;
works with mouse events too thus, it is easier to test/debug.
&lt;a href=&quot;https://github.com/jeromeetienne/virtualjoystick.js&quot;&gt;virtualjoystick.js&lt;/a&gt;
has been widely inpired by
&lt;a href=&quot;http://sebleedelisle.com/2011/04/multi-touch-game-controller-in-javascripthtml5-for-ipad/&quot;&gt;this post&lt;/a&gt;
by
&lt;a href=&quot;http://sebleedelisle.com/&quot;&gt;Seb Lee-Delisle&lt;/a&gt;.
The screencast below is short introduction about
&lt;a href=&quot;https://github.com/jeromeetienne/virtualjoystick.js&quot;&gt;virtualjoystick.js&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/viyr_W0z1U8?hl=en&amp;fs=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;Let's Get Started&lt;/h2&gt;

&lt;p&gt;First step, you download
&lt;a href=&quot;https://raw.github.com/jeromeetienne/virtualjoystick.js/master/virtualjoystick.js&quot;&gt;virtualjoystick.js&lt;/a&gt;
from its
&lt;a href=&quot;https://github.com/jeromeetienne/virtualjoystick.js&quot;&gt;github&lt;/a&gt;
Then include it in your own code.&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;virtualjoystick.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The joystick is composed of 2 parts: the &lt;em&gt;base&lt;/em&gt; and the &lt;em&gt;stick&lt;/em&gt;.
First the plare touch the screen, it gives the position of the &lt;em&gt;base&lt;/em&gt;.
Then it drags its fingers to gives the position of the &lt;em&gt;stick&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Let's Use it&lt;/h2&gt;

&lt;iframe src=&quot;http://jeromeetienne.github.com/virtualjoystick.js/&quot;
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot; style=&quot;float: right; margin-left: 1em;&quot;&gt;
&lt;/iframe&gt;


&lt;p&gt;First step is to create the object from &lt;code&gt;VirtualJoystick&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var joystick = new VirtualJoystick()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The constructor has some options.
They have sensible default.
You can change them to fit your specific needs.
See
&lt;a href=&quot;https://github.com/jeromeetienne/virtualjoystick.js#readme&quot;&gt;github README&lt;/a&gt;
for a full API description.
You may look at the &lt;a href=&quot;https://github.com/jeromeetienne/virtualjoystick.js/blob/master/index.html&quot;&gt;index.html&lt;/a&gt;.
It is an example which uses the library.&lt;/p&gt;

&lt;p&gt;It is possible to read
&lt;a href=&quot;http://en.wikipedia.org/wiki/Analog_stick&quot;&gt;analogic&lt;/a&gt;
coordinates.
&lt;code&gt;joystick.deltaX()&lt;/code&gt; gives the &lt;em&gt;delta x&lt;/em&gt; between the base and the stick in pixel.
&lt;code&gt;joystick.deltaY()&lt;/code&gt; gives the &lt;em&gt;delta y&lt;/em&gt;.
Those analogic coordinates may be interpreted as a
&lt;a href=&quot;http://www.slagcoin.com/joystick/restrictors.html&quot;&gt;joystick with 4 switches&lt;/a&gt;.
Similar to
&lt;a href=&quot;http://en.wikipedia.org/wiki/Arrow_keys&quot;&gt;arrow keys&lt;/a&gt;
in a way.
&lt;code&gt;joystick.up()&lt;/code&gt; tells you if your joystick is up or not.
You guessed the meaning of &lt;code&gt;.down()&lt;/code&gt;, &lt;code&gt;.right()&lt;/code&gt; and &lt;code&gt;.left()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The source is available on
&lt;a href=&quot;https://github.com/jeromeetienne/virtualjoystick.js&quot;&gt;github&lt;/a&gt;
under MIT license.
Later, a button may be implemented as well.
It is alway usefull to able to fire in video games :)
That's all folks, have fun.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Boilerplate for Three.js</title>
    <link href="http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/"/>
    <updated>2011-12-20T19:09:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js</id>
    <content type="html">&lt;p&gt;This post presents
&lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate&quot;&gt;boilerplate for three.js&lt;/a&gt;.
I looked at
&lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;html5 boilerplate&lt;/a&gt;
and found
&lt;a href=&quot;http://www.youtube.com/watch?v=NMEB78VX2P0&quot;&gt;it&lt;/a&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=oDlsOyPKUTM&quot;&gt;awesome&lt;/a&gt;.
&lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;html5 boilerplate&lt;/a&gt;
is a fast way start a clean project.
It avoids repetitive tasks, following &lt;a href=&quot;http://en.wikipedia.org/wiki/Don't_repeat_yourself&quot;&gt;DRY&lt;/a&gt; principles.
It includes all those good practices, which are so easy to forget.
It seems all good to me :)
&lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate&quot;&gt;boilerplate for three.js&lt;/a&gt; tries to apply similar principles.
I frequently write simple three.js demo for tutorials, and repeat the first steps way too often for my tastes :)
It has been done in effort to make 3D on the web even easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jeromeetienne.github.com/threejsboilerplate/&quot;&gt;Try it&lt;/a&gt; out.
&quot;Boilerplate for three.js is a web template for a fast, robust and future-proof site.
Boilerplate is not a framework, nor does it prescribe any philosophy of
development, it's just got some tricks to get your project off the ground
quickly and right-footed.&quot;
- freely adapted from &lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;html5 boilerplate site&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h2&gt;Walkthrough&lt;/h2&gt;

&lt;p&gt;This project is at an early stage.
Dont hesitate to suggest improvements or
bug fixes in
&lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate/issues&quot;&gt;github issues&lt;/a&gt;.
It has been done to run everywhere, and to promote good practices.
The
&lt;a href=&quot;http://www.youtube.com/watch?v=kOReCN5t2Eo&quot;&gt;screencast&lt;/a&gt;
below will walk you through the source of the project.
22min... a long one :)&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/kOReCN5t2Eo?hl=en&amp;fs=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;Compatibility is key&lt;/h2&gt;

&lt;p&gt;It has to run everywhere.
We believe that compatibility is crucial on the web.
The boilerplate seamlessly works on desktop and mobile.
It is working on webgl/canvas2d and supports mouse/touch events.&lt;/p&gt;

&lt;p&gt;It renders on
&lt;a href=&quot;http://en.wikipedia.org/wiki/WebGL&quot;&gt;webgl&lt;/a&gt;
if available, else it fallbacks on
&lt;a href=&quot;http://html5doctor.com/an-introduction-to-the-canvas-2d-api/&quot;&gt;canvas2D&lt;/a&gt;.
It is often forgotten, but &lt;a href=&quot;&quot;&gt;three.js&lt;/a&gt; is able render on various backends,
they are called &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/src/renderers&quot;&gt;renderers&lt;/a&gt;.
It isnt always possible to fallback tho.
Materials are especially sensible to the type of renderer you use.
For examples, many materials are webgl specific as they contains shaders and canvas2D got no shaders.
Up to you to find the balance that fit your needs.&lt;/p&gt;

&lt;p&gt;The camera controls is rather basic.
If you need a different controls for your camera, pick one in
&lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/src/extras/controls&quot;&gt;this list&lt;/a&gt;.
This one is simple to use and understand, a nice feature for a boilerplate.
It supports
&lt;a href=&quot;http://www.quirksmode.org/js/events_mouse.html&quot;&gt;mouse events&lt;/a&gt;
and
&lt;a href=&quot;https://developer.mozilla.org/en/DOM/Touch_events&quot;&gt;touch events&lt;/a&gt;.
So you can run with a touch screen with a glitch.&lt;/p&gt;

&lt;h2&gt;Good Practices&lt;/h2&gt;

&lt;p&gt;Some features have been added: fullscreen, screenshot and window resize.
I consider them &lt;a href=&quot;http://en.wikipedia.org/wiki/Best_practice&quot;&gt;good pratices&lt;/a&gt; which are often forgotten.
Some numbers based on &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/examples&quot;&gt;three.js examples&lt;/a&gt;:
128 examples total,
26 of them handle touch events,
11 handle window resize,
2 handle screenshot,
0 handle fullscreen.&lt;/p&gt;

&lt;iframe src=&quot;http://jeromeetienne.github.com/threejsboilerplate&quot;
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot; style=&quot;float: right; margin-left: 1em;&quot;&gt;
&lt;/iframe&gt;


&lt;p&gt;&lt;strong&gt;Fullscreen&lt;/strong&gt; is supported to enjoy your 3D on a large display
without visual distraction.
If you press &lt;em&gt;f&lt;/em&gt;, your demo will go fullscreen.
For technical details, see &quot;&lt;a href=&quot;http://learningthreejs.com/blog/2011/11/17/lets-make-a-3d-game-make-it-fullscreen/&quot;&gt;Make It Fullscreen&lt;/a&gt;&quot; post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screenshot&lt;/strong&gt; makes it easy to share the image
as what you see on the screen at a given moment.
If you press &lt;em&gt;p&lt;/em&gt;, a new tab will open with a screenshot of the rendered content.
For technical details, see &quot;&lt;a href=&quot;http://learningthreejs.com/blog/2011/09/03/screenshot-in-javascript/&quot;&gt;screenhot in javascript&lt;/a&gt;&quot; post.
It it usefull to share nice images and to help debug on various plateforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Window resize&lt;/strong&gt; is supported because it is required. Without it, your 3D scene will loose scaleing and center
when you resize the window or go fullscreen.
For technical details, see &quot;&lt;a href=&quot;http://learningthreejs.com/blog/2011/08/30/window-resize-for-your-demos/&quot;&gt;window resize your demos&lt;/a&gt;&quot; post.&lt;/p&gt;

&lt;h2&gt;How to use it ?&lt;/h2&gt;

&lt;p&gt;It is quite simple, first you download the code as
a &lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate/zipball/master&quot;&gt;.zip file&lt;/a&gt;
or with the &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; command line below.&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/jeromeetienne/threejsboilerplate.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;then start updating &lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate/blob/master/index.html&quot;&gt;index.html&lt;/a&gt; to
fit your needs.
Below is a screencast where i use the
&lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate&quot;&gt;boilerplate&lt;/a&gt;
to display a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Utah_teapot&quot;&gt;teapot&lt;/a&gt;
in only 3min!
Why a teapot ? Because it is the &quot;hello world&quot; of 3D :)
Be warned, the video is a bit speedy, im just starting at doing screencast.
Next ones will hopefully be slower.&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/0XPOCi6FJX0?hl=en&amp;fs=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Later, it may be cool to have a builder.
I think it may be possible to make it client only.
&lt;a href=&quot;http://jszip.stuartk.co.uk/&quot;&gt;jszip&lt;/a&gt; library would create the zip containing all the files.
&lt;a href=&quot;https://github.com/jeromeetienne/shorttag.js&quot;&gt;shorttag.js&lt;/a&gt; library would compile templates according to user needs.
A builder would produce a cleaner and smaller result for you to play with.&lt;/p&gt;

&lt;p&gt;I gave a short talk at &lt;a href=&quot;http://parisjs.org&quot;&gt;parisjs&lt;/a&gt; about it, here are the &lt;a href=&quot;http://jeromeetienne.github.com/slides-3jsbp-parisjs14&quot;&gt;slides&lt;/a&gt;.
I hope
&lt;a href=&quot;https://github.com/jeromeetienne/threejsboilerplate&quot;&gt;boilerplate for three.js&lt;/a&gt;.
will help make
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
even easier to use.
This project is quite new and will likely improve soon.
That's all folks, have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Particles: Online Editor for Sparks.js</title>
    <link href="http://learningthreejs.com/blog/2011/12/19/particles-online-editor-for-sparks-js/"/>
    <updated>2011-12-19T12:11:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/12/19/particles-online-editor-for-sparks-js</id>
    <content type="html">&lt;p&gt;This post is the second of our &lt;a href=&quot;http://learningthreejs.com/blog/categories/particles&quot;&gt;serie on particles&lt;/a&gt;.
It presents
&lt;a href=&quot;https://github.com/jeromeetienne/sparkseditor&quot;&gt;sparkseditor&lt;/a&gt;
, an online editor for
&lt;a href=&quot;https://github.com/zz85/sparks.js&quot;&gt;sparks.js&lt;/a&gt;
with
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;.
In a few word, it is a webpage which provide an text editor
with a
&lt;a href=&quot;https://github.com/zz85/sparks.js&quot;&gt;sparks.js&lt;/a&gt;
effect.
You got the code in the editor
and
you see &lt;em&gt;live&lt;/em&gt; the resulting particles effect.
I like this &lt;em&gt;live&lt;/em&gt; aspect a lot :)
I think it makes your design more direct, lower latency, less overhead.
More creative in a way.
&lt;a href=&quot;http://jeromeetienne.github.com/sparkseditor/&quot;&gt;Try it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This editor has been made to lower the barrier of entry on
&lt;a href=&quot;https://github.com/zz85/sparks.js&quot;&gt;sparks.js&lt;/a&gt;
with
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
particles.
The UI is rather simple and obvious. You can find a small presentation in the
screencast below.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/nu00FhIW5bc?hl=en&amp;fs=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;


&lt;h2&gt;Live editor rocks&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jeromeetienne.github.com/sparkseditor/&quot;&gt;Sparkseditor&lt;/a&gt;
is widely inpired by
&lt;a href=&quot;http://glsl.heroku.com/e&quot;&gt;glsl editor&lt;/a&gt;
from
&lt;a href=&quot;http://mrdoob.com/&quot;&gt;mrdoob&lt;/a&gt;
and
&lt;a href=&quot;http://www.iquilezles.org/apps/shadertoy/&quot;&gt;shadertoy&lt;/a&gt;
from
&lt;a href=&quot;http://www.iquilezles.org/&quot;&gt;Inigo Quilez&lt;/a&gt;.
On the same vibe,
&lt;a href=&quot;http://lea.verou.me/&quot;&gt;lea verou&lt;/a&gt;
recently
released
&lt;a href=&quot;http://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/&quot;&gt;dablet&lt;/a&gt;,
an online editor for
&lt;a href=&quot;http://en.wikipedia.org/wiki/Cascading_Style_Sheets&quot;&gt;css&lt;/a&gt;.
There is a clear trend here...
What is it about those live editors ?
A live editor produces a result immediatly.
This helps design your effect faster.
Be light on your foot kindof style.
Very agile way to design.&lt;/p&gt;

&lt;p&gt;Additionally, it is easy to share with others because we have &lt;em&gt;bookmarkability&lt;/em&gt;.
We do that by storing state in url.
On the down side, it makes super long+ugly urls...
&lt;a href=&quot;http://en.wikipedia.org/wiki/URL_shortening&quot;&gt;url shortening&lt;/a&gt;
helps us reduces this issue.
In our case, we use
&lt;a href=&quot;https://bitly.com/&quot;&gt;bitly&lt;/a&gt;
service.&lt;/p&gt;

&lt;p&gt;This editor is purely static files.
No specific server to run, no need to admin and no risk to go offline.
Oh and by the way i dont not even have to pay for hosting this application.
I think it shows html5 in all its power.
The web is becoming something real nice :) html5 i love you!&lt;/p&gt;

&lt;h2&gt;conclusion&lt;/h2&gt;

&lt;p&gt;Under the hood,
&lt;a href=&quot;https://github.com/jeromeetienne/sparkseditor&quot;&gt;sparkseditor&lt;/a&gt;
uses
&lt;a href=&quot;https://github.com/jeromeetienne/threex/blob/master/threex.sparks.js&quot;&gt;threex.sparks.js&lt;/a&gt;, a
&lt;a href=&quot;https://github.com/jeromeetienne/threex&quot;&gt;threex&lt;/a&gt;
helper, to make
&lt;a href=&quot;https://github.com/zz85/sparks.js/&quot;&gt;sparks.js&lt;/a&gt;
even easier to use.
This helper will be the subject of a future post of our
&lt;a href=&quot;http://learningthreejs.com/blog/categories/particles&quot;&gt;particles series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The source is open-source under
&lt;a href=&quot;https://github.com/jeromeetienne/sparkseditor/blob/master/MIT-LICENSE.txt&quot;&gt;MIT&lt;/a&gt;.
You can get it in its &lt;a href=&quot;https://github.com/jeromeetienne/sparkseditor&quot;&gt;git repository&lt;/a&gt;.
If you hit bugs, fill issues on github.
Feel free to fork and modify it!
That's all folks, have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Particles: Introduction to Sparks.js</title>
    <link href="http://learningthreejs.com/blog/2011/12/14/particles-introduction-to-sparks-js/"/>
    <updated>2011-12-14T12:08:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/12/14/particles-introduction-to-sparks-js</id>
    <content type="html">&lt;p&gt;This post is the first of a &lt;a href=&quot;http://learningthreejs.com/blog/categories/particles&quot;&gt;serie on particles&lt;/a&gt;.
It specifically is about
&lt;a href=&quot;https://github.com/zz85/sparks.js&quot;&gt;sparks.js&lt;/a&gt;.
&lt;em&gt;sparks.js&lt;/em&gt; is lightweight 3d
&lt;a href=&quot;http://en.wikipedia.org/wiki/Particle_system&quot;&gt;Particle system&lt;/a&gt;
in javascript, for use with
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/sole/tween.js&quot;&gt;tween.js&lt;/a&gt;.
It is from
&lt;a href=&quot;http://www.lab4games.net/zz85/blog/&quot;&gt;zz85&lt;/a&gt;
who already did
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_geometry_text.html&quot;&gt;3D text&lt;/a&gt;
and
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_geometry_subdivison.html&quot;&gt;Catmull Clark subdivision&lt;/a&gt;.
a productive guy :)&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_particles_shapes.html&quot;&gt;demo&lt;/a&gt;
below is one of the many &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/examples&quot;&gt;three.js examples&lt;/a&gt;.
While im on it, the &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/examples&quot;&gt;example directory&lt;/a&gt; is a gold mine.
Go dig in it to understand how to code three.js :)
Back to the point, this
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_particles_shapes.html&quot;&gt;demo&lt;/a&gt;
is rather cool no ?
You want to do the same ?
During this short post, let me walk you walk thru the code for particles in this example.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;iframe src=&quot;http://mrdoob.github.com/three.js/examples/webgl_particles_shapes.html&quot; width=&quot;100%&quot; height=&quot;420&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;


&lt;h2&gt;Lets Get Started&lt;/h2&gt;

&lt;p&gt;So lets see how to use it. First step, you download
&lt;a href=&quot;https://raw.github.com/zz85/sparks.js/master/Sparks.js&quot;&gt;sparks.js&lt;/a&gt;
from
&lt;a href=&quot;https://github.com/zz85/sparks.js&quot;&gt;its github&lt;/a&gt;.
Then include it in your own code.&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;Sparks.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;First a few words on what is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Particle_system&quot;&gt;particle system&lt;/a&gt;.
It is usually composed of 2 big parts: the &lt;em&gt;emitter&lt;/em&gt; and the &lt;em&gt;particle&lt;/em&gt; itself.
Emitter creates particles.
Particles are usually smallish objects on the screen.
As you got many particles at the same time, they appears a single mass.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h2&gt;Let's create an emitter&lt;/h2&gt;

&lt;p&gt;First we create the emitter like this.
&lt;code&gt;emitter&lt;/code&gt; is the main object we will play with.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var counter = new SPARKS.SteadyCounter( 500 );
var emitter = new SPARKS.Emitter( counter );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;code&gt;counter&lt;/code&gt; controls how frequently particles are created. Here it will
emit 500 particles per seconds.
Now let's start emit particles.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emitter.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Sparks.js has a very flexible core.
It mainly uses two stacks of functions.
&lt;em&gt;Initializers&lt;/em&gt; is the stack run at the creation of a particle.
&lt;em&gt;Actions&lt;/em&gt; is another stack which is run at every step of a particle life.
Those functions are run in order.
Up to you to configure them to fit your needs.
You can easily code your own &lt;em&gt;initializer&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt;.
Dont worry it got a bunch of predefined ones.&lt;/p&gt;

&lt;h2&gt;Let's initialize&lt;/h2&gt;

&lt;p&gt;Lets me walk you thru the ones used in our example. The whole stack is below.
&lt;code&gt;emitter.addInitializer()&lt;/code&gt; to push a new initializer, and &lt;code&gt;emitter.removeInitializer()&lt;/code&gt;
to remove it, not too hard :)&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emitterpos = new THREE.Vector3( 0, 0, 0 );
emitter.addInitializer( new SPARKS.Position( new SPARKS.PointZone( emitterpos ) ) );
emitter.addInitializer( new SPARKS.Lifetime( 1, 15 ));
var vector = new THREE.Vector3( 0, -5, 1 );
emitter.addInitializer( new SPARKS.Velocity( new SPARKS.PointZone( vector ) ) );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SPARKS.Position(zone)&lt;/code&gt; initializer set the original position of the particle.
A &lt;code&gt;zone&lt;/code&gt; provide a location in space.
&lt;code&gt;new SPARKS.PointZone( emitterpos )&lt;/code&gt; means the particles will always start from this specific point in space.
It is possible to have other zones.
For example, &lt;code&gt;SPARKS.LineZone( startVector3, endVector3 )&lt;/code&gt; represents a line between 2 points, so
your particle would start anywhere on this line.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SPARKS.Lifetime(mintime, maxtime)&lt;/code&gt; initializer set particle's lifetime.
You can specify a range and a random value will be assigned.
Don't forget to add &lt;code&gt;SPARKS.Age&lt;/code&gt; action to handle its lifetime.
And the last one.
&lt;code&gt;SPARKS.Velocity(zone)&lt;/code&gt; set particle's velocity based on a &lt;code&gt;zone&lt;/code&gt; location.
The initializer stack is setup the particle at the begining of its life.
Let's see what happen during this life.&lt;/p&gt;

&lt;h2&gt;Let's do some actions&lt;/h2&gt;

&lt;p&gt;Actions are performed at every step of a particle life.
Same as with initializers, &lt;code&gt;emitter.addAction()&lt;/code&gt; to push a new action,
&lt;code&gt;emitter.removeAction()&lt;/code&gt; to remove it.
For our examples the whole action stack is this.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emitter.addAction( new SPARKS.Age() );
emitter.addAction( new SPARKS.Accelerate( 0, 0, -50 ) );
emitter.addAction( new SPARKS.Move() );
emitter.addAction( new SPARKS.RandomDrift( 90, 100, 2000 ) );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now lets details it.
We have already seen &lt;code&gt;SPARKS.Age()&lt;/code&gt;. It is handle the lifetime of each particle.
&lt;code&gt;SPARKS.Accelerate(x,y,z)&lt;/code&gt; changes the velocity by adding a fixed amount at every step.
This one produces a gravity effect with a negative &lt;code&gt;y&lt;/code&gt;.
&lt;code&gt;SPARKS.Move()&lt;/code&gt; makes the particles move in our 3D space.
&lt;code&gt;SPARKS.RandomDrift(x,y,z)&lt;/code&gt; changes the velocity by adding a random amount at every step.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this short introduction got you excited about
&lt;a href=&quot;https://github.com/zz85/sparks.js/&quot;&gt;sparks.js&lt;/a&gt;.
Next posts on the
&lt;a href=&quot;http://learningthreejs.com/blog/categories/particles&quot;&gt;particle series&lt;/a&gt;
may be a UI editor, stay tuned!
I find sparks.js clean and flexible.
Flexibility is very important for particles.
It helps provide a wide variety of effect in your games/demos.
For more informations and authoritative answer, see the
&lt;a href=&quot;https://github.com/zz85/sparks.js/&quot;&gt;github repository&lt;/a&gt;.
That's all for today folks, have fun.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Constructive Solid Geometry With csg.js</title>
    <link href="http://learningthreejs.com/blog/2011/12/10/constructive-solid-geometry-with-csg-js/"/>
    <updated>2011-12-10T16:30:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/12/10/constructive-solid-geometry-with-csg-js</id>
    <content type="html">&lt;p&gt;This post is about
&lt;a href=&quot;http://en.wikipedia.org/wiki/Constructive_solid_geometry&quot;&gt;constructive solid geometry&lt;/a&gt;
, an impressive word :)
In fact, it is just a way to build complex objects from simpler ones.
Those simple objects are assembled using
&lt;a href=&quot;http://en.wikipedia.org/wiki/Algebra_of_sets&quot;&gt;operations&lt;/a&gt;
such as union, difference and intersection.&lt;/p&gt;

&lt;p&gt;Recently
&lt;a href=&quot;http://madebyevan.com/&quot;&gt;Evan Wallas&lt;/a&gt;
released
&lt;a href=&quot;http://evanw.github.com/csg.js/&quot;&gt;csg.js&lt;/a&gt;,
a clean self-contained library to do
&lt;a href=&quot;http://en.wikipedia.org/wiki/Constructive_solid_geometry&quot;&gt;constructive solid geometry&lt;/a&gt;.
So &lt;a href=&quot;http://chandler.prallfamily.com/&quot;&gt;Chandler Prall&lt;/a&gt;
wrote a
&lt;a href=&quot;http://chandler.prallfamily.com/2011/12/constructive-solid-geometry-with-three-js/&quot;&gt;bridge&lt;/a&gt;
to make it easy to use with
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With all this nice code, i wrote the little
&lt;a href=&quot;http://learningthreejs.com/data/constructive-solid-geometry-with-csg-js/&quot;&gt;demo of a dice&lt;/a&gt;
you can see on the right. Thus you can click to change the operations, play
with it and have a feel of the various operations.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;iframe src=&quot;http://learningthreejs.com/data/constructive-solid-geometry-with-csg-js/&quot;
    width=&quot;100%&quot; height=&quot;420&quot; frameborder=&quot;0&quot; style=&quot;float: right; margin-left: 1em;&quot;&gt;
&lt;/iframe&gt;


&lt;h2&gt;Let's start&lt;/h2&gt;

&lt;p&gt;So lets see how to use it. First step, you download
csg.js from
&lt;a href=&quot;http://evanw.github.com/csg.js/&quot;&gt;here&lt;/a&gt;
, ThreeCSG.js bridge from
&lt;a href=&quot;http://chandler.prallfamily.com/labs/three/csg/ThreeCSG.js&quot;&gt;here&lt;/a&gt;
. Then include those line in your own code.&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;csg.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;ThreeCSG.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Let's convert&lt;/h2&gt;

&lt;p&gt;Ok now that we got the source, let's use it.
&lt;a href=&quot;http://chandler.prallfamily.com/2011/12/constructive-solid-geometry-with-three-js/&quot;&gt;ThreeCSG.js&lt;/a&gt;
is a bridge between
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
and
&lt;a href=&quot;http://evanw.github.com/csg.js/&quot;&gt;csg.js&lt;/a&gt;.
Both libraries use a different format for geometry.
&lt;a href=&quot;http://chandler.prallfamily.com/2011/12/constructive-solid-geometry-with-three-js/&quot;&gt;ThreeCSG.js&lt;/a&gt;
does the conversion back and forth.
To convert your three.js geometry to a csg geometry, use this line.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var geometryCsg = THREE.CSG.toCSG(geometryThree);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Then you likely apply
&lt;a href=&quot;http://en.wikipedia.org/wiki/Algebra_of_sets&quot;&gt;boolean operations&lt;/a&gt;
on
&lt;a href=&quot;http://evanw.github.com/csg.js/&quot;&gt;csg.js&lt;/a&gt; geometry.
To convert it back to three.js, just do&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var geometryThree   = THREE.CSG.fromCSG(geometryCsg);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;You end up with a normal &lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/core/Geometry.js&quot;&gt;three.js geometry&lt;/a&gt;
than you can use everywhere, like
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/extras/GeometryUtils.js&quot;&gt;GeometryUtils&lt;/a&gt;
or
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/objects/Mesh.js&quot;&gt;Mesh&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Let's assemble&lt;/h2&gt;

&lt;p&gt;Now the fun part, lets assemble objects with those misterious
&lt;a href=&quot;http://en.wikipedia.org/wiki/Algebra_of_sets&quot;&gt;boolean operations&lt;/a&gt;
on ours
&lt;a href=&quot;http://evanw.github.com/csg.js/&quot;&gt;csg.js&lt;/a&gt;
geometries.
There are &lt;a href=&quot;http://en.wikipedia.org/wiki/Constructive_solid_geometry&quot;&gt;3 of them&lt;/a&gt;:
&lt;a href=&quot;http://en.wikipedia.org/wiki/Complement_(set_theory)&quot;&gt;difference&lt;/a&gt;,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Union_(set_theory)&quot;&gt;union&lt;/a&gt;
and
&lt;a href=&quot;http://en.wikipedia.org/wiki/Intersection_(set_theory)&quot;&gt;intersect&lt;/a&gt;.
To build our dice, first we build a
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/extras/geometries/CubeGeometry.js&quot;&gt;cube&lt;/a&gt;
then we subtract a bunch of
&lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/src/extras/geometries/SphereGeometry.js&quot;&gt;spheres&lt;/a&gt;
to makes the holes.&lt;/p&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/constructive-solid-geometry-with-csg-js/images/image-substract-320x240.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;Once you converted your objects, you apply operations on them.
For the dice, we use &lt;code&gt;.subtract()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cube.substract(spheres)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;


&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/constructive-solid-geometry-with-csg-js/images/image-union-320x240.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;But it is possible to use &lt;code&gt;.union()&lt;/code&gt; to add them.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cube.union(spheres)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Or to keep only the common part of both objects with &lt;code&gt;.intersect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/constructive-solid-geometry-with-csg-js/images/image-intersect-320x240.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;You can chain those operations to your own taste.
Up to you to be creative :)&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cube.intersect(spheres)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Constructive_solid_geometry&quot;&gt;Constructive solid Geometry&lt;/a&gt;
is simple and quite powerfull.
&lt;a href=&quot;http://evanw.github.com/csg.js/&quot;&gt;csg.js&lt;/a&gt;
,
&lt;a href=&quot;http://chandler.prallfamily.com/2011/12/constructive-solid-geometry-with-three-js/&quot;&gt;ThreeCSG.js&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
makes it real easy to play with.
You may look at the source of our dice
&lt;a href=&quot;http://learningthreejs.com/data/constructive-solid-geometry-with-csg-js/&quot;&gt;demo&lt;/a&gt;
to see a working version of this code.
That's all for today, have fun :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lets Make a 3D Game: Make It Embedded</title>
    <link href="http://learningthreejs.com/blog/2011/11/21/lets-make-a-3d-game-make-it-embedded/"/>
    <updated>2011-11-21T16:32:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/11/21/lets-make-a-3d-game-make-it-embedded</id>
    <content type="html">&lt;iframe src=&quot;http://marblesoccer.com&quot;
    allowfullscreen webkitallowfullscreen mozallowfullscreen
    width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot; style=&quot;float: right; margin-left: 1em;&quot;&gt;
&lt;/iframe&gt;


&lt;p&gt;This post is part of the &lt;a href=&quot;http://learningthreejs.com/blog/categories/tutorial3dgame/&quot;&gt;&quot;Let's make a 3D game&quot;&lt;/a&gt; series.
The previous post was on
&lt;a href=&quot;http://learningthreejs.com/blog/2011/11/17/lets-make-a-3d-game-make-it-fullscreen/&quot;&gt;fullscreen API&lt;/a&gt;.
Here is another one on resizing the display area.
This post is about embedding your game in another page.
It is usefull to include it in a blog, in facebook, iGoogle or other game plateforms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://marblesoccer.com&quot;&gt;MarbleSoccer&lt;/a&gt;
now contains all the tricks explained in this post.
&lt;em&gt;Show dont tell&lt;/em&gt;, you can see it embedded on the left.
Embedding your game implies various things.
As your game is hosted in another page, it likely got a smaller display area.
HTML5
&lt;a href=&quot;http://www.w3.org/TR/css3-mediaqueries/&quot;&gt;CSS media query&lt;/a&gt;
makes it easy to fit various sizes.
Another part are the
&lt;a href=&quot;http://en.wikipedia.org/wiki/DOM_events&quot;&gt;DOM events&lt;/a&gt;
from the iframe.
They will be propagated to the host page and may produce undesirable effects.
We see how to shield them.
But first let's see about
&lt;a href=&quot;http://en.wikipedia.org/wiki/HTML_element#Frames&quot;&gt;iframe&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Let's go play in an iframe&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/HTML_element#Frames&quot;&gt;iframe&lt;/a&gt;
is an easy and secure way to embed a page in another.
Let's declare it.&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;iframe src=&quot;http://marblesoccer.com&quot;
    allowfullscreen webkitallowfullscreen mozallowfullscreen
    width=&quot;480&quot; height=&quot;320&quot; frameborder=&quot;0&quot;&amp;gt;
&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;The attributes are pretty classics: &lt;code&gt;frameborder&lt;/code&gt; to remove an ugly default border,
&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; for size and &lt;code&gt;src&lt;/code&gt; for your game page.
The ones ending with &lt;code&gt;allowfullscreen&lt;/code&gt; tell the browser that this iframe is
allowed to go fullscreen. More about fullscreen in this
&lt;a href=&quot;http://learningthreejs.com/blog/2011/11/17/lets-make-a-3d-game-make-it-fullscreen/&quot;&gt;previous post&lt;/a&gt;
or in the &lt;a href=&quot;http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html&quot;&gt;spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may need to determined if your game is embedded or not.
Use this line will tell if it is in a iframe or not.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var isInIframe  = (window != window.top);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Fit in a smaller display area&lt;/h2&gt;

&lt;p&gt;When your game is embedded, it is likely to have a smaller display area.
How to deal with this ?
First, we have 2 types of rendering in our game:
a 3D display where
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;three.js&lt;/a&gt;
displays the
&lt;a href=&quot;http://en.wikipedia.org/wiki/WebGL&quot;&gt;WebGL&lt;/a&gt;, and
a DOM display for
&lt;a href=&quot;http://en.wikipedia.org/wiki/On-screen_display&quot;&gt;OSD&lt;/a&gt;
such as score, timers and other popups.&lt;/p&gt;

&lt;p&gt;For &lt;em&gt;3D rendering&lt;/em&gt;, we have already seen window resizing in
&lt;a href=&quot;http://learningthreejs.com/blog/2011/08/30/window-resize-for-your-demos/&quot;&gt;this post&lt;/a&gt;.
Just download
&lt;a href=&quot;http://learningthreejs.com/data/THREEx/THREEx.WindowResize.js&quot;&gt;THREEx.WindowResize&lt;/a&gt;
and add this line and you are done. Not too hard, hey.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;THREEx.WindowResize(renderer, camera);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now &lt;em&gt;the DOM display&lt;/em&gt;. It may simply be done via CSS
and
&lt;a href=&quot;http://www.w3.org/TR/css3-mediaqueries/&quot;&gt;media queries&lt;/a&gt;.
Typically, you may reduce the size of your font or icons.
I won't try to teach css, other do that much
&lt;a href=&quot;https://developer.mozilla.org/en/CSS/Media_queries&quot;&gt;better&lt;/a&gt;
&lt;a href=&quot;http://www.html5rocks.com/en/mobile/mobifying.html#toc-mediaqueries&quot;&gt;than&lt;/a&gt;
&lt;a href=&quot;http://thinkvitamin.com/code/media-queries-width-and-height-video-tutorial/&quot;&gt;me&lt;/a&gt;.
Just a pick of what i did, not sure at all it is the best way.
I reduce the OSD display if your game page is 640px or less.&lt;/p&gt;

&lt;p&gt;```css&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@media all and (max-width: 640px) {
    /* here put your style specific for embedded case */
    body { font-size : 60%; }
    img { width : 48px; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Shield Events&lt;/h2&gt;

&lt;p&gt;Strange section title, hey.
It means &lt;em&gt;prevents DOM events from the iframe to interfere with the host page&lt;/em&gt;.
Not much clearer...
Maybe with an example ? Let's see the arrows+scroll case.
Show dont tell.
Below are 2 iframes: on the left, no shielding happens, on the right shielding happens.
Try to click on them and use arrows up/down.&lt;/p&gt;

&lt;iframe src=&quot;http://learningthreejs.com/data/THREEx/examples/threex.embedded/noshield-iframe.html&quot; width='50%' height='120px'&gt;&lt;/iframe&gt;


&lt;iframe src=&quot;http://learningthreejs.com/data/THREEx/examples/threex.embedded/withshield-iframe.html&quot; width='49%' height='120px'&gt;&lt;/iframe&gt;


&lt;p&gt;On the left, the host page scrolls, but not on the right.
Why does this happen ? good question :)
If our game iframe got the focus and users press up or down, the iframe will received
&lt;a href=&quot;http://www.quirksmode.org/dom/events/keys.html&quot;&gt;keydown/keyup events&lt;/a&gt;.
Up to now, all is ok...
Troubles appear when those events are bubbling to the host page, they may trigger a scrolling.&lt;/p&gt;

&lt;p&gt;Imagine the page going up and down while you play, the game becomes unplayable very fast :)
So here is the code which prevents this behavior. It listens to arrows
&lt;a href=&quot;http://www.quirksmode.org/dom/events/keys.html&quot;&gt;keydown events&lt;/a&gt;.
and prevent their default.&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.addEventListener('keydown', function(event){
    // if it is keydown on a arrow, prevent default
    if( event.keyCode &amp;gt;= 37 &amp;amp;&amp;amp; event.keyCode &amp;lt;= 40 ){
        event.preventDefault();
    }
}, true);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I gathered the code in
&lt;a href=&quot;http://learningthreejs.com/data/THREEx/threex.embedded.js&quot;&gt;threex.embedded&lt;/a&gt;,
see its
&lt;a href=&quot;http://learningthreejs.com/data/THREEx/docs/threex.embedded.html&quot;&gt;annoted source&lt;/a&gt;.
Iframe is a easy and secure way to make your game embeddable.
We have seen how to handle smaller display area
with
&lt;a href=&quot;http://learningthreejs.com/data/THREEx/THREEx.WindowResize.js&quot;&gt;THREEx.WindowResize&lt;/a&gt;
and
&lt;a href=&quot;http://www.w3.org/TR/css3-mediaqueries/&quot;&gt;media queries&lt;/a&gt;.
Additionnaly we even shield DOM events, so we can use arrow keys for player control.
You are all set! Go embed your game now :)&lt;/p&gt;
</content>
  </entry>
  
</feed>
