<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Learning Three.js</title>
  <link href="http://learningthreejs.com/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2011-08-19T10:02:43+02:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name>Jerome Etienne</name>
    
  </author>

  
  <entry>
    <title>Tween.js for Smooth Animation</title>
    <link href="http://learningthreejs.com/blog/2011/08/17/tweenjs-for-smooth-animation/"/>
    <updated>2011-08-17T10:16:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2011/08/17/tweenjs-for-smooth-animation</id>
    <content type="html">&lt;p&gt;This post presents &lt;a href=&quot;https://github.com/sole/tween.js&quot;&gt;tween.js&lt;/a&gt; and how you can use it to easily smooth your animation.
&lt;strong&gt;tween.js&lt;/strong&gt; is a &quot;super simple, fast and easy to use tweening engine&quot; from &lt;a href=&quot;https://github.com/sole&quot;&gt;sole&lt;/a&gt;.
It provides tweening and full blown animations thanks to chaining. Lets get started!
But first, here is a &lt;a href=&quot;http://learningthreejs.com/data/tweenjs_for_smooth_animation/tweenjs_for_smooth_animation.html&quot;&gt;demo&lt;/a&gt;
using tween.js. It has basic parameters for you to play with and get a feel of what tweening
may be.&lt;/p&gt;

&lt;h2&gt;Tweening... what's that ?&lt;/h2&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/tweenjs_for_smooth_animation/images/tweenjs-linear-easenone.png' width='' height='' alt='Linear' title='Linear'&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;http://en.wikipedia.org/wiki/Tweening&quot;&gt;wikipedia article&lt;/a&gt;, &lt;em&gt;tweening&lt;/em&gt; is an abreviation of &lt;em&gt;inbetweening&lt;/em&gt;, i
dont know why but i find that funny maybe because &lt;em&gt;inbetweening&lt;/em&gt; isnt a word to begin with :)
Lets get back to business, what is a tween ? It is a interpolation between 2 values,
from the &lt;code&gt;source&lt;/code&gt; to the &lt;code&gt;target&lt;/code&gt;.
The tween will simply generate the needed values needed inbetween those 2 limits. The key is &lt;strong&gt;where&lt;/strong&gt;
are those values.
This is done with the &lt;strong&gt;ease function&lt;/strong&gt;. The most obvious one is to go straight from &lt;code&gt;source&lt;/code&gt;
to &lt;code&gt;target&lt;/code&gt;. This is the linear function you see on on the right.&lt;/p&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/tweenjs_for_smooth_animation/images/tweenjs-cubic-easeinout.png' width='' height='' alt='Cubic EaseInOut' title='Cubic EaseInOut'&gt;
&lt;img class='left ' src='http://learningthreejs.com/data/tweenjs_for_smooth_animation/images/tweenjs-elastic-easeinout.png' width='' height='' alt='Elastic EaseInOut' title='Elastic EaseInOut'&gt;
But some are more funky, you can
see &lt;em&gt;Elastic EaseInOut&lt;/em&gt; on the left
and
see &lt;em&gt;Cubic EaseInOut&lt;/em&gt; on the right.
Many others exist for our delight as you can see &lt;a href=&quot;http://sole.github.com/tween.js/examples/03_graphs.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more --&gt;


&lt;h2&gt;First include the library&lt;/h2&gt;

&lt;p&gt;Now that we got some understanding of concept, lets see how to use it.
We start by simply including the library file in the page.
Download it &lt;a href=&quot;https://github.com/sole/tween.js&quot;&gt;there&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;``` html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type='text/javascript' src='tween.js'&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Now Create a Tween&lt;/h2&gt;

&lt;p&gt;Lets see how it is used in the &lt;a href=&quot;http://learningthreejs.com/data/tweenjs_for_smooth_animation/tweenjs_for_smooth_animation.html&quot;&gt;demo&lt;/a&gt;.
A practical case is less dry than a theorical explaination, and you can tweak the demo after that :)
So our case will be to move a sphere &lt;code&gt;x&lt;/code&gt; position back and forth, say between 0 to 400.&lt;/p&gt;

&lt;p&gt;First we define the original &lt;code&gt;position&lt;/code&gt; and the &lt;code&gt;target&lt;/code&gt;.
This &lt;code&gt;position&lt;/code&gt; variable will be updated by tween.js with new values until it is equal to &lt;code&gt;target&lt;/code&gt;values.
Then we create the tween object which do the job for us :)&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var position = { x : 0 }; 
var target = { x : 400 };
var tween = new TWEEN.Tween(position).to(target, 2000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Noticed the 2000 at the end? It means the tween will last 2 seconds.
Ok so &lt;code&gt;tween&lt;/code&gt; variable will make position.x goes from 0 to 400 in 2 seconds. To
make the 3D object moves along, we need to be notified at every modification. This
is done with &lt;code&gt;toUpdate()&lt;/code&gt;. If you want to be notified at the end of
the tween, use &lt;code&gt;onComplete()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tween.onUpdate(function(){
    mesh.position.x = position.x;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Want to Tweak it ?&lt;/h2&gt;

&lt;p&gt;Lets custom it some more.
what is about delaying the begining of the tween by say 500 milliseconds
for the fun of it.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tween.delay(500)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/tweenjs_for_smooth_animation/images/tweenjs-elastic-easeinout.png' width='' height='' alt='Elastic EaseInOut' title='Elastic EaseInOut'&gt;
Obviously you can change the ease function too.
Choose any one you like among &lt;a href=&quot;http://sole.github.com/tween.js/examples/03_graphs.html&quot;&gt;the 31 from tween.js&lt;/a&gt;.
Lets pick the funny one on the right, it is &lt;code&gt;TWEEN.Easing.Elastic.EaseInOut&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tween.ease(TWEEN.Easing.Elastic.EaseInOut)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Lets run!&lt;/h2&gt;

&lt;p&gt;Ok now the tween is fully configured, lets run it. First we tell the library the
configuration is over and it can start the tween.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tween.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Then we periodically update the tweens we got. This code fits well in the render loop.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TWEEN.update();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;And you are done. Now you can go crazy and put tweening everywhere! In object
position like we did here, in colors, or in scale, anywhere, feel free :)&lt;/p&gt;

&lt;h2&gt;Chaining Tweens for Animation&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://learningthreejs.com/data/tweenjs_for_smooth_animation/tweenjs_for_smooth_animation.html&quot;&gt;demo&lt;/a&gt;
has an endless animation, the sphere going back and forth until the end of time.
How do we do that ? we chain tweens. They
will be executed one after the other. &lt;code&gt;chain()&lt;/code&gt; provides a easy way
to build longer, more varied animations. Suppose we got &lt;code&gt;tweenHead&lt;/code&gt;
and &lt;code&gt;tweenBack&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// after tweenHead, do tweenBack
tweenHead.chain(tweenBack);
// And after tweenBack, do tweenHead, so it is cycling
tweenBack.chain(tweenHead);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;That's All Folks&lt;/h2&gt;

&lt;p&gt;So &lt;a href=&quot;https://github.com/sole/tween.js&quot;&gt;tween.js&lt;/a&gt; is a nice small library which
provides an easy way to animate things in your demos. You can get a play with
the parameters of the &lt;a href=&quot;http://learningthreejs.com/data/tweenjs_for_smooth_animation/tweenjs_for_smooth_animation.html&quot;&gt;example&lt;/a&gt; or
look at its &lt;a href=&quot;http://learningthreejs.com/data/tweenjs_for_smooth_animation/docs/tweenjs_for_smooth_animation.html&quot;&gt;annotated code&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lets Do a Sky</title>
    <link href="http://learningthreejs.com/blog/2011/08/15/lets-do-a-sky/"/>
    <updated>2011-08-15T12:26:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2011/08/15/lets-do-a-sky</id>
    <content type="html">&lt;p&gt;This tutorial is about doing a sky. It makes a nice panorama with a nice immersive effect.
This is much simpler than people would expect : only 3 steps for a total around 20 lines.
You can find a &lt;a href=&quot;http://learningthreejs.com/data/lets_do_a_sky/lets_do_a_sky.html&quot;&gt;live demo&lt;/a&gt; of it. It may be a
easy addition to your effects. This is simple and efficient.&lt;/p&gt;

&lt;h1&gt;Background&lt;/h1&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/lets_do_a_sky/images/Panorama_cube_map.png' width='' height='' alt='Close up' title='Close up'&gt;
Technically this is called a &lt;a href=&quot;http://en.wikipedia.org/wiki/Cube_mapping&quot;&gt;cube mapping&lt;/a&gt;.
Why that ? because the principle is so simple: we create a large cube, apply some images
on each face of this cube and put the camera inside it. That's it.&lt;/p&gt;

&lt;p&gt;The illustration (from &lt;a href=&quot;http://en.wikipedia.org/wiki/User:SharkD/Images&quot;&gt;SharkD&lt;/a&gt; at &lt;a href=&quot;http://en.wikipedia.org/wiki/File:Panorama_cube_map.png&quot;&gt;wikipedia&lt;/a&gt;)
on the right, may help understanding.
On the &lt;em&gt;bottom left&lt;/em&gt;, you can see a 3D scene with a dot in the middle... This is
where the camera will be positionned.
On the &lt;em&gt;bottom right&lt;/em&gt;, you can see the same 3D scene, with the large cube and now the
camera is inside.
The kind of cross &lt;em&gt;on the top half&lt;/em&gt; are the images used as texture.
Those are the ones which gonna be applied inside the large sky cube. If you go to
the &lt;a href=&quot;http://learningthreejs.com/data/lets_do_a_sky/lets_do_a_sky.html&quot;&gt;demo&lt;/a&gt;,
open your browser debugger and look at downloaded images, you will see those 6 images.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h1&gt;Lets Code it Now!&lt;/h1&gt;

&lt;p&gt;Now that we got an understanding of the background, lets code it. To add a skybox
to your page is 3 simple steps in around 20 lines. Lets look at them.&lt;/p&gt;

&lt;h2&gt;Step 1: Lets load the cube textures&lt;/h2&gt;

&lt;p&gt;This will create the texture objects and download all the images. They are usually stored
in 6 images: &lt;em&gt;posx&lt;/em&gt; for the front face on X axis, negx for the back side on the X axis, posy
for the front on Y axis and so on.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var urlPrefix = &quot;images/Bridge2/&quot;;
var urls = [ urlPrefix + &quot;posx.jpg&quot;, urlPrefix + &quot;negx.jpg&quot;,
    urlPrefix + &quot;posy.jpg&quot;, urlPrefix + &quot;negy.jpg&quot;,
    urlPrefix + &quot;posz.jpg&quot;, urlPrefix + &quot;negz.jpg&quot; ];
var textureCube = THREE.ImageUtils.loadTextureCube( urls );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Step 2: Lets init the shadder&lt;/h2&gt;

&lt;p&gt;Then we init the shadder for the cube. It is rather standard, dont forget to init &lt;code&gt;tCube&lt;/code&gt; uniform
with your textures.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var shader = THREE.ShaderUtils.lib[&quot;cube&quot;];
shader.uniforms[&quot;tCube&quot;].texture = textureCube; // textureCube has been init before
var material = new THREE.MeshShaderMaterial({
    fragmentShader  : shader.fragmentShader,
    vertexShader    : shader.vertexShader,
    uniforms        : shader.uniforms
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Step 3: Lets Create the Cube Itself&lt;/h2&gt;

&lt;p&gt;Now we create the large cube. The actual size is up to you. Note that you need to ensure
your camera is able to see that far.
The last step is to add it to the scene, and we are done. Rather simple for such a cool effect i would say.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// build the skybox Mesh 
skyboxMesh  = new THREE.Mesh( new THREE.CubeGeometry( 100000, 100000, 100000, 1, 1, 1, null, true ), material );
// add it to the scene
scene.addObject( skyboxMesh );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This tutorial explained how to do a sky using cube mapping. Additionnaly you can look at &lt;a href=&quot;http://learningthreejs.com/data/lets_do_a_sky/docs/lets_do_a_sky.html&quot;&gt;an anotated source of the demo&lt;/a&gt;
especially the &lt;a href=&quot;http://learningthreejs.com/data/lets_do_a_sky/docs/lets_do_a_sky.html#section-10&quot;&gt;skybox section&lt;/a&gt;
of the &lt;a href=&quot;http://learningthreejs.com/data/lets_do_a_sky/lets_do_a_sky.html&quot;&gt;live demo&lt;/a&gt;. You may go out with your camera and
do your own cube images. Just use &lt;a href=&quot;http://hugin.sourceforge.net/&quot;&gt;Hugin&lt;/a&gt; later to stinch them back together.
It takes around 20 lines, quite small source for such
immersive effect. Use it and tweek it for fun :) Examples are there for that.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>dat-gui - Simple UI for Demos</title>
    <link href="http://learningthreejs.com/blog/2011/08/14/dat-gui-simple-ui-for-demos/"/>
    <updated>2011-08-14T19:42:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2011/08/14/dat-gui-simple-ui-for-demos</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/dat-gui/&quot;&gt;Dat.gui&lt;/a&gt;
is a GUI widget for your demos. It provide way for the user to set parameters of the
demo to play with it. It is simple to code, yet cool and minimalist on the screen.
It is the blue vuemeters on the screenshot below. This post is a presentation of
the library.&lt;/p&gt;

&lt;p&gt;&lt;img class='right ' src='http://learningthreejs.com/data/dat_gui_simple_ui_for_demos/datgui_integrated.png' width='' height='' alt='Integrated' title='Integrated'&gt;&lt;/p&gt;

&lt;h2&gt;How to include it&lt;/h2&gt;

&lt;p&gt;Simply include the library file in your page. Download it &lt;a href=&quot;http://code.google.com/p/dat-gui&quot;&gt;there&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;``` html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type='text/javascript' src='DAT.GUI.min.js'&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;How to use it&lt;/h2&gt;

&lt;p&gt;First initialize the object itself. It will create the widget and display it on the
screen top right corner. You can change this position if you wish (see &lt;code&gt;autoplace&lt;/code&gt;)
&lt;img class='right ' src='http://learningthreejs.com/data/dat_gui_simple_ui_for_demos/datgui_closeup.png' width='' height='' alt='Close up' title='Close up'&gt;&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gui = new DAT.GUI({
    height : 5 * 32 - 1
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Here is the visual result on the right.
The misterious &lt;code&gt;height&lt;/code&gt;parameter is the height of the widget. You have to set it manually.
In our case, we get 5 lines plus the close button.
The formula which worked for me has been &lt;code&gt;nline * 32 - 1&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Lets configure it and add some variables&lt;/h2&gt;

&lt;p&gt;First we need to store the values of the variables, lets call that &lt;code&gt;params&lt;/code&gt;. It may be &lt;code&gt;this&lt;/code&gt; too, it depends
of your personal style of code.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var params = {
    interation: 5000
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Let add a variable name &lt;code&gt;interation&lt;/code&gt; to the widget.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gui.add(params, 'interation')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;It will add a line in the GUI widget.
&lt;em&gt;dat.gui&lt;/em&gt; will see &lt;code&gt;params.iteration&lt;/code&gt; is a Number and thus &lt;em&gt;guess&lt;/em&gt; you want to display a slider for it.
If it is a function, it will be interpreted as a button and call params.foobar() on click.
If the user changes the value with the mouse, the value of &lt;code&gt;params.iteration&lt;/code&gt;
will be changed accordingly. Up to you to know what to do with it.&lt;/p&gt;

&lt;h2&gt;Lets Custom it Some More&lt;/h2&gt;

&lt;p&gt;You may be easy be notified of user changes with callbacks.  &lt;code&gt;onFinishChange&lt;/code&gt; is triggered once the value is changed.&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gui.add(params, 'interation').onFinishChange(function(){
    // refresh based on the new value of params.interation
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;You can customize further if needed. To change the label displayed on the variable line, use &lt;code&gt;.name(&quot;better label&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gui.add(params, 'interation').name('Intertions')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;You can set up min/max limits and steps. This one will allows values from
128 to 256, only if they are multiple of 16&lt;/p&gt;

&lt;p&gt;``` javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gui.add(params, 'width').min(128).max(256).step(16)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this introduction got you excited about DAT.GUI. I find nice for simple demos parameters, simple to code and good
looking on the screen at that. For more informations and authoritative
answer, &lt;a href=&quot;http://code.google.com/p/dat-gui/&quot;&gt;see details&lt;/a&gt; here.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lets Do a Cube</title>
    <link href="http://learningthreejs.com/blog/2011/08/06/lets-do-a-cube/"/>
    <updated>2011-08-06T00:00:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2011/08/06/lets-do-a-cube</id>
    <content type="html">&lt;p&gt;Here is the first lesson! I started with something real simple, a &lt;strong&gt;cube&lt;/strong&gt;.
I wasnt sure how to present the lesson, so i did
an &lt;a href=&quot;http://learningthreejs.com/data/lets_do_a_cube/docs/lets_do_a_cube.html&quot;&gt;annotated source of the example&lt;/a&gt;
to get things started.
I kept it small as possible to simplicity sake.
It is only 70 lines of javascript for a &lt;em&gt;webgl simplistic demo&lt;/em&gt;. I hope it shows that webgl
is quite accessible.&lt;/p&gt;

&lt;p&gt;You can see this &lt;a href=&quot;http://learningthreejs.com/data/lets_do_a_cube/lets_do_a_cube.html&quot;&gt;example live&lt;/a&gt; or in the
screencast below.&lt;/p&gt;

&lt;center&gt;
    &lt;iframe width=&quot;425&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/8PrXCBOllTg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;



</content>
  </entry>
  
  <entry>
    <title>Presentation at parisjs</title>
    <link href="http://learningthreejs.com/blog/2011/07/28/presentation_at_parisjs/"/>
    <updated>2011-07-28T00:00:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2011/07/28/presentation_at_parisjs</id>
    <content type="html">&lt;p&gt;&lt;a target='_blank' title='yfrog.com - Image And Video Hosting' href='http://yfrog.com/kg1g6rtj'&gt;&lt;img class=&quot;right&quot; src='http://a.yfrog.com/img736/5082/1g6rt.th.jpg' border='0'/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yesterday i did a &lt;a href=&quot;https://docs.google.com/present/view?id=dhng4bgf_71c9txhrdb&quot;&gt;presentation&lt;/a&gt;
about Three.js at &lt;a href=&quot;http://parisjs.org&quot;&gt;parisjs&lt;/a&gt;. My first
on the topic, it was fun, i will clearly do more :)&lt;/p&gt;

&lt;p&gt;On the right, a picture taken during the presentation by &lt;a href=&quot;http://twitter.com/#!/42loops&quot;&gt;42loops&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;
    &lt;iframe src=&quot;https://docs.google.com/present/view?id=dhng4bgf_71c9txhrdb&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;342&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;



</content>
  </entry>
  
  <entry>
    <title>Three.js Installation</title>
    <link href="http://learningthreejs.com/blog/2011/07/15/threejs-installation/"/>
    <updated>2011-07-15T00:00:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2011/07/15/threejs-installation</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/mrdoob/three.js&quot;&gt;Three.js&lt;/a&gt; is a 3D library in javascript. According
to &lt;a href=&quot;http://mrdoob.com/&quot;&gt;mrdoob&lt;/a&gt;, its author, three.js is&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The aim of the project is to create a lightweight 3D engine with a very low level of&lt;br/&gt;complexity — in other words, for dummies. The engine can render using canvas, svg and WebGL.&lt;/p&gt;&lt;footer&gt;&lt;strong&gt;mrdoob&lt;/strong&gt;&lt;cite&gt;tree.js Author&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;


&lt;h2&gt;Step 1: get the source&lt;/h2&gt;

&lt;p&gt;The source are available &lt;a href=&quot;https://github.com/mrdoob/three.js&quot;&gt;here&lt;/a&gt;. Use
the following command&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;how to get the source - example.sh &lt;/span&gt;&lt;/figcaption&gt;
 &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='sh'&gt;&lt;div class='line'&gt;git clone https://github.com/mrdoob/three.js.git
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;It will provide the whole source on your local disk. You are done, just point
a web server on it, and go in &lt;code&gt;/examples&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Step 2: Description of the folder structure&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/utils&lt;/code&gt; it is a bunch of utilities (see &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/utils&quot;&gt;here&lt;/a&gt;).
You can find the script to &lt;a href=&quot;https://github.com/mrdoob/three.js/blob/master/utils/build.sh&quot;&gt;build the releases&lt;/a&gt;
(concatenate the files, minify them, all that).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/build&lt;/code&gt; It is an administrative directory where the build release is stored. Not really important
for a user, it is more for a developper of the library itself.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/src&lt;/code&gt; It is the library code in itself. We will study that in more details later. Meanwhile dont hesitate
to go look: it is rather small and clean.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/examples&lt;/code&gt; It is a list of all the examples. They kinda are the documentation of three.js, try
them. They are the meat, if you like something, just do view-source:

&lt;ul&gt;
&lt;li&gt;some of them are for &amp;lt;canvas&gt; rendering, most of them are for WebGL. Three.js is able to render 3D scene
on canvas, Dom, SVG and obviously WebGL (with various level of support). See &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/src/renderers&quot;&gt;here&lt;/a&gt;
for details.&lt;/li&gt;
&lt;li&gt;Some are focused on &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/src/extras/geometries&quot;&gt;geometry&lt;/a&gt; i.e.
the shape of the objects. See &lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_geometry_colors.html&quot;&gt;here&lt;/a&gt;
, &lt;a href=&quot;http://mrdoob.github.com/three.js/examples/canvas_geometry_cube.html&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;http://mrdoob.github.com/three.js/examples/canvas_geometry_cube.html&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some are focused on the &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/src/materials&quot;&gt;material&lt;/a&gt; i.e.
kindof the colors and the texture of the objects. See
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_materials_texture_filters.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_materials_texture_filters.html&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_materials_normalmap.html&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Others are focused on &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/src/lights&quot;&gt;light&lt;/a&gt;, there are different
type of light sources. See
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/canvas_lights_pointlights.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/canvas_lights_pointlights_smooth.html&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_lights_pointlights.html&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some are focused on &lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/src/extras/physics&quot;&gt;collisions&lt;/a&gt;. See
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_collisions_trigger.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples/webgl_collisions_reaction.html&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;http://mrdoob.github.com/three.js/examples//webgl_collisions_mesh.html&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Point a web server on &lt;code&gt;three.js&lt;/code&gt; source tree and go in &lt;code&gt;/examples&lt;/code&gt; to try them. It is fun!&lt;/p&gt;
</content>
  </entry>
  
</feed>
